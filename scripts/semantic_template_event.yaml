#
#  Copyright 2020 Izumi Haruta
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.


##### Semantic templates for English #####

## Basic logical form:
##
## Type T ::= Entity | Event | Degree | Prop | T1 -> T2
## 
## Variables		Type
## x,y,z,x1,x2		Entity, e
## e,e1,e2,w       	Event, v
## d,d1,d2       	Degree, d
## F,G,F1,F2,G1,G2     	e -> t
## K,K1,K2       	v -> t
## C1,C2	 	e -> e -> t
## H			(e -> d -> t) -> d -> t
## H1			e -> d -> t
## I,I1,I2		(e -> t) -> t -> t -> t
## J1,J2	 	(d -> t) -> t
## N,N1,N2		(e -> t) -> e -> t
## Q,Q1,Q2		(e -> t) -> (e -> t) -> t (= NP*)
## S,S1,S2       	(v -> t) -> t (= S*)
## V1            	((e -> t) -> (e -> t) -> t) -> (v -> t) -> t (= NP* -> S*)
## V2            	((e -> t) -> (e -> t) -> t) -> ((e -> t) -> (e -> t) -> t) -> (v -> t) -> t (= NP* -> NP* -> S*)
## E             	expression (surface form)

# Cat            	Term : Type
# S	     	 	\K. exists e.(E(e) & K(e))
# N          	 	\F x. (E(x) & F(E))
# N[adj]     	 	\d1 d2 d3 H I J1 J2 c F x. all d1.exists c.(E(x) & F(E) & J1(\d4.$less(d4,d1)) & H(\y.-E(y)) & (-H(\y.A(y,$difference(d1,_2))) -> _tall(x,d1)))
# N[down]    	 	\F x.exists d1 c.(N(x) & _many(x,d1) & $less(d1,_d0))
# N[nm]      	 	\N1 I. I(\F x.N1(\Q.F(Q,d),x), d)
# NP         	 	\F1 F2. exists x.(E(x) & F1(x) & F2(x))
# NP[dgr]    	 	\F.F(E)
# NP[npi]    	 	
# NP[adj]    	 	
# S|NP 	     	 	\Q K. Q(\x.True, \x.exists e.(E(e) & (Nom(e) = x) & K(e)))
# S[adj]|NP  	 	\Q d1 d2 d3 H I J1 J2 K.exists d1.Q(\x.True,\x.(E(x,d1) & J1(\d4.$less(d4,d1)) & H(E,d1)))
# (S[adv]|NP)|(S[adv]|NP)
#			\V Q d1 d2 d3 H I J1 J2 K.V(Q,\e.I((E(e,d1) & K(e)),-(d1 = d3),(H(E,d2) & J1(\d4.$less(d4,d1)) & J2(\d4.$less(d4,d1)))))
# (S|NP)|NP  		\Q1 Q2 K. Q2(\y.True, \y.Q1(\x.True, \x.exists e.(E(e) & (Nom(e) = x) & (Acc(e) = y) & K(e))))
# S|S        		\S K. S(\e.(E(e) & K(e)))
# NP|NP      		\Q F1 F2. Q(\x.(E(x) & F1(x)),F2)
# N|N	     		\N F x. N(\G.(E(x) & F(G)),x)		
# PP         		\e.E(e)


############### Unary lexical rule #################

## existential type-raising from N to NP
- category: NP
  rule: lex
  semantics: \E F1 F2. exists x. (E(\x.True,x) & F1(x) & F2(x))

# Unary rule for downward monotonicity
- category: NP
  rule: lex
  semantics: \E F1 F2. - exists x. (E(\x.True,x) & F1(x) & F2(x))
  child0_category: N[down=true]

# Unary rule for non-monotonic 
- category: NP
  rule: lex
  semantics: \E F1 F2. E(\W1 W2.(exists x.W1(\N d.(_many(x,d) & F1(x) & F2(x)),x) & all d1.(exists x.W1(\N d.(_many(x,d1) & F1(x) & F2(x)),x) -> $lesseq(d1,W2))))
  child0_category: N[nm=true]

# Unary rule for nominal adjectives 
- category: NP[adj=true]
  rule: lex
  semantics: \E F1 F2 V Q d1 d2 H I J K.exists x.E(d1,d2,d3,H,I,\W.(J(W) & F1(x) & F2(x)),J2,c,x)
  child0_category: N[adj=true]

- category: NP
  rule: lex
  semantics: \E F1 F2. exists d. ((d = E) & F1(E) & F2(E))
  child0_pos: CD

- category: NP
  rule: lex
  semantics: \E F1 F2. exists x. (_year(E,x) & F1(x) & F2(x))
  child0_pos: CD
  child0_entity: B-DATE

## existential type-raising for proper nouns from N to NP
- category: NP
  rule: lex
  semantics: \E F1 F2. (F1(E) & F2(E))
  # semantics: \E F1 F2. exists x. ((x = E) & F1(E) & F2(E))
  child0_pos: NNP

# - category: NP
#   rule: lex
#   # semantics: \E F1 F2. (F1(E) & F2(E))
#   # semantics: \E F1 F2. exists x. ((x = E) & F1(E) & F2(E))
#   semantics: \E F1 F2. exists x. (E(\w.True,x) & F1(x) & F2(x))
#   child0_pos: NNP
#   child0_entity: B-PERSON

- category: NP
  rule: lex
  # semantics: \E F1 F2. exists x. ((x = E) & F1(E) & F2(E))
  semantics: \E F1 F2. exists x. (E(\x.True,x) & F1(x) & F2(x))
  child0_pos: NN

- category: NP
  rule: lex
  semantics: \E F1 F2. exists x. (E(\x.True,x) & F1(x) & F2(x))
  child0_entity: I-ORG

- category: NP
  rule: lex
  # semantics: \E F1 F2. exists x. ((x = E) & F1(E) & F2(E))
  semantics: \E F1 F2. (F1(E) & F2(E))
  child0_entity: B-ORG 

- category: NP
  rule: lex
  semantics: \E F1 F2. exists x. (E(\x.True,x) & F1(x) & F2(x))
  child0_entity: B-NORP

- category: NP
  rule: lex
  semantics: \E F1 F2. exists x. (E(\x.True,x) & F1(x) & F2(x))
  child0_entity: B-GPE

- category: NP
  rule: lex
  semantics: \E F1 F2. exists x. (E(\x.True,x) & F1(x) & F2(x))
  child0_entity: B-LOC

- category: NP
  rule: lex
  # semantics: \E F1 F2. exists x. ((x = E) & F1(E) & F2(E))
  semantics: \E F1 F2. (F1(E) & F2(E))
  child_any_pos: NNP
  child_any_base: either

# degree expressions
- category: NP[deg=true]
  rule: lex
  semantics: \E F. F(E) 
  child0_child0_pos: CD
  # child0_child1_entity: I-QUANTITY

# S[to]|NP => N|N
- category: N|N
  rule: lex
  semantics: \V N F x. (N(\x.True,x) & V(\G1 G2.G2(x), \e.True))
  child0_category: S|NP

## S[ng]|NP => NP
- category: NP
  rule: lex
  semantics: \V F1 F2. exists x. (V(\G1 G2.G2(x), \e.True) & F1(x) & F2(x))
  child0_category: S[ng=true]|NP

## S[adj]|NP => NP
- category: NP
  rule: lex
  semantics: \V F1 F2. exists x. (V(\G1 G2.G2,d1,d2,_th(_u),H,\A1 A2 A3.(A1(x) & -A2),J1,J2,\e.True) & F1(x) & F2(x))
  child0_category: S[adj=true]|NP

## N|N => NP|NP
- category: NP|NP
  rule: lex
  semantics: \E Q F1 F2.Q(\x.(E(\A1 A2.A1(_u),\w.True,x) & F1(x)),F2)
  child0_category: N|N

## N|N => NP|NP
- category: NP|NP
  rule: lex
  semantics: \E Q F1 F2.Q(\x.(_many(x,E) & F1(x)),F2)
  child0_pos: CD
  child0_category: N|N

## N|N => NP|NP
- category: NP/NP
  rule: lex
  semantics: \E Q F1 F2.exists d1.(Q(\x.(_many(x,d1) & F1(x)),F2) & -Q(\x.(_many(x,d1) & F1(x)),-F2))
  child0_child0_child0_child1_surf: more
  child0_child0_child1_surf: than
  child0_child1_surf: half

## N[down]|N => NP|NP
- category: NP|NP
  rule: lex
  semantics: \E Q F1 F2.-Q(\x.(E(\A1 A2.A1(_u),\w.True,x) & F1(x)),F2)
  child0_category: N[down=true]|N

## N[down]|N => NP|NP
- category: NP|NP
  rule: lex
  semantics: \E Q F1 F2.-all d1.(Q(\x.(_many(x,d1) & F1(x)),-F2) -> Q(\x.(_many(x,d1) & F1(x)),F2))
  child0_child0_child0_child1_surf: less
  child0_child0_child1_surf: than
  child0_child1_surf: half

## S[pss,ng]|NP => NP|NP; S[dcl]|NP => NP|NP
- category: NP|NP
  rule: lex
  semantics: \V Q F1 F2. Q(\x.(V(\G1 G2.G2(x), \e.True) & F1(x)), F2)
  child0_category: S|NP

## S[adj]|NP => NP|NP
- category: NP|NP
  rule: lex
  semantics: \A Q F1. Q(\x.(A(\F1 F2.F2(x),d1,d2,d3,H,I,J1,J2,\e.True) & F1(x)), F2)
  child0_category: S[adj=true]|NP

## (S|NP)|NP => NP|NP
- category: NP|NP
  rule: lex
  semantics: \V2 Q F1 F2. Q(\x.(exists y.V2(\G1 G2.G2(y),\G1 G2.G2(x),\e.True) & F1(x)), F2)
  child0_category: (S|NP)|NP

## NP => NP|(NP|NP)
- category: NP|(NP|NP)
  rule: lex
  semantics: \Q M F1 F2. Q(\x.(M(\G1 G2.G1(x),F1,\y.True)), F2)
  child0_category: NP

## S ==> S|S
- category: S|S
  rule: lex
  semantics: \S1 S2 K. (S1(K) & S2(K))
  child0_category: S

## S|NP ==> S|S
- category: S|S
  rule: lex
  semantics: \V S K. S(\e.(exists x.(V(\G1 G2.G2(x), \e.True) & (Dat(e) = x)) & K(e)))
  child0_category: S|NP

## S[adj]|NP ==> S|S
- category: S|S
  rule: lex
  semantics: \A S K. S(\e.(exists x.(A(\G1 G2.G2,d1,d2,_th(_u),H,\A1 A2 A3.(A1(x) & -A2),J1,J2,\e.True) & (Dat(e) = x)) & K(e)))
  child0_category: S[adj=true]|NP

## S ==> NP|NP
- category: NP|NP
  rule: lex
  semantics: \S Q F1 F2. (S(\e.True) & Q(F1,F2))
  child0_category: S

## S|NP ==> (S|NP)|(S|NP)
- category: (S|NP)|(S|NP)
  rule: lex
  semantics: \V2 V1 Q K. Q(\x.True, \x.(V1(\F1 F2.F2(x),K) & V2(\F1 F2.F2(x),K)))
  child0_category: S|NP

## S[ng]|NP => (S|NP)|(S|NP)
- category: (S|NP)|(S|NP)
  rule: lex
  semantics: \V1 V2 Q K. Q(\x.True, \x.(V1(\F1 F2.F2(x),\e.True) & V2(\F1 F2.F2(x),K)))
  child0_category: S[ng=true]|NP

## S[adj]|NP => (S|NP)|(S|NP)
- category: (S|NP)|(S|NP)
  rule: lex
  semantics: \A V2 Q K. Q(\x.True, \x.(A(\G1 G2.G2,d1,d2,_th(_u),H,\A1 A2 A3.(A1(x) & -A2),J1,J2,\e.True) & V2(\F1 F2.F2(x),K)))
  child0_category: S[adj=true]|NP

## NP => S|(S|NP)
- category: S|(S|NP)
  rule: tr
  semantics: \Q V K. V(Q,K)
  child0_category: NP

## PP => (S[X=true]|NP)|((S[X=true]|NP)|PP)
- category: (S|NP)|((S|NP)|PP)
  rule: tr
  semantics: \K1 M Q K2. M(K1,Q,K2)
  child0_category: PP

## S|NP => (S|NP)|((S|NP)|(S|NP))
- category: (S|NP)|((S|NP)|(S|NP))
  rule: tr
  semantics: \V M Q K. M(V,Q,K)
  child0_category: S|NP

## S|NP => (S|NP)|((S|NP)|NP)
- category: (S|NP)|((S|NP)|NP)
  rule: tr
  semantics: \Q1 V2 Q2 K. V2(Q2,Q1,K)
  child0_category: NP


##### Binary lexical rules #####

# - category: NP/N
#   semantics: \L R F1 F2 F3.(exists x.(exists d1.F1(\N.(_many(x,d1) & $less(d1,_th(N))),x) & F2(x) & F3(x)) & all x d1.exists d2.((F1(\N.(_many(x,d1) & (d2 = _th(N))),x) & F2(x) & F3(x)) -> $less(d1,d2)))
#   child0_surf: pos
#   child1_surf: a~few

- category: NP
  semantics: \L R F1 F2.exists x.(R(\G._many(x,_th(G)),x) & F1(x) & F2(x))
  child0_surf: a~lot~of
  child1_pos: NNS

- category: NP
  semantics: \L R F1 F2.exists x.(R(\G._much(x,_th(G)),x) & F1(x) & F2(x))
  child0_surf: a~lot~of
  child1_pos: NN

# No less than ...
- category: NP
  semantics: \L R F1 F2.-L(R,F1,F2)
  child1_category: N[down=true]
  child0_category: NP[nb=true]/N

## Conjunction

- category: S|S
  rule: conj
  semantics: \L S2 S1 K. (S1(K) & S2(K))

- category: (S|S)|(S|S)
  rule: conj
  semantics: \L M2 M1 S K. M1(M2(S),K)

- category: NP|NP
  rule: conj
  semantics: \L Q2 Q1 F1 F2. (Q1(F1,F2) & Q2(F1,F2))

- category: N|N
  rule: conj
  semantics: \L F1 F2 F x. (F1(F,x) & F2(F,x))

- category: PP|PP
  rule: conj
  semantics: \L F1 F2 x. (F1(x) & F2(x))

- category: (S|NP)|(S|NP)
  rule: conj
  # semantics: \L V2 V1 Q K. (V1(Q,K) & V2(Q,K)) # SICK-6358
  semantics: \L V2 V1 Q K. Q(\x.True, \x.(V1(\F1 F2.F2(x),K) & V2(\F1 F2.F2(x),K))) # SICK-7649

# ex. John is tall and cool.
- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  rule: conj
  semantics: \L A1 A2 Q d1 d2 d3 H I J1 J2 K.(exists d1.A2(Q,d1,d1,_th(_u),H,\A1 A2 A3 x.(A1(x) & -A2),J1,J2,K) & exists d1.A1(Q,d1,d1,_th(_u),H,\A1 A2 A3 x.(A1(x) & -A2),J1,J2,K))
  child0_surf: and

# - category: (S|NP)|(S[adj=true]|NP)
#   rule: bx
#   semantics: \L R X0 Q K.Q(\x.True,\x.(X0(\F1 F2.-F2(x),d1,d2,d3,H,I,\d.True,\d.True,\e.True) & exists e.((Subj(e) = Subj(e)) & K(e))))
#   child0_surf: is
#   child1_surf: not

- category: ((S|NP)|PP)|((S|NP)|PP)
  rule: conj
  semantics: \L V1 V2 K1 Q K2. Q(\x.True,\x.(V2(\e.True,\F1 F2.F2(x),\e.(K1(e) & K2(e))) & V1(\e.True,\F1 F2.F2(x),\e.True)))

- category: (N|N)|(N|N)
  rule: conj
  # semantics: \L M1 M2 F x. M1(M2(F),x)
  semantics: \L M1 M2 N F x. M1(\G1 G2.N(\G3.(M2(\P1 P2.P1(G3),\w.True,x) & G1(G3)),G2),F,x)

- category: (N|N)|(N|N)
  rule: conj
  semantics: \L M1 M2 N F x. M1(\G1 G2.N(\G3.(M2(\P1 P2.P1(G3),F,x) & G1(G3)),G2),F,x)
  child1_child1_pos: JJ

# # ex. John bought a white and blue car.
# - category: (N|N)|(N|N)
#   rule: conj
#   semantics: \L M1 M2 N1 F x. N1(\N2.M1(\Q1 Q2.Q1(N2),\N2.M2(\Q1 Q2.Q1(N2),\w.True,x),x),x)
#   child0_surf: and
#   child1_pos: JJ
#   child1_entity: PRE

- category: (N|PP)|(N|PP)
  rule: conj
  # semantics: \L M1 M2 K F e. M1(M2(F),e)
  semantics: \L M1 M2 K F e. M1(M2(K,F,x),e)

- category: (NP|NP)|(NP|NP)
  rule: conj
  semantics: \L M2 M1 Q F1 F2. (M1(Q,F1,F2) & M2(Q,F1,F2))

- category: (NP|N)|(NP|N)
  rule: conj
  semantics: \L D2 D1 F G1 G2. (D1(F,G1,G2) & D2(F,G1,G2))

- category: ((S|NP)|NP)|((S|NP)|NP)
  rule: conj
  semantics: \L V2 V1 Q1 Q2 K. Q2(\x.True,\x.Q1(\y.True,\y.(V1(\F1 F2.F2(y),\F1 F2.F2(x),K) & V2(\F1 F2.F2(y),\F1 F2.F2(x),K))))

- category: ((S|NP)|(S|NP))|((S|NP)|(S|NP))
  rule: conj
  semantics: \L M2 M1 V Q K. (M1(V,Q,K) & M2(V,Q,K))

- category: (((S|NP)|(S|NP))|NP)|(((S|NP)|(S|NP))|NP)
  rule: conj
  semantics: \L M2 M1 Q1 V Q2 K. (M1(Q1,V,Q2,K) & M2(Q1,V,Q2,K))

- category: ((S|NP)|((S|NP)|NP))|((S|NP)|((S|NP)|NP))
  rule: conj
  semantics: \L M1 M2 V2 Q K. (M1(V2,Q,K) & M2(V2,Q,K))

- category: (((S|NP)|PP)|NP)|(((S|NP)|PP)|NP)
  rule: conj
  semantics: \L M1 M2 Q1 K1 Q2 K2. (M1(Q1,K1,Q2,K2) & M2(Q1,K1,Q2,K2))

- category: S|S
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: S|S

- category: (S|S)|(S|S)
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: (S|S)|(S|S)

- category: NP|NP
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: NP|NP

- category: N|N
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: N|N

- category: PP|PP
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: PP|PP

- category: (S|NP)|(S|NP)
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: (S|NP)|(S|NP)

- category: ((S|NP)|PP)|((S|NP)|PP)
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: (S|NP)|PP

- category: (N|N)|(N|N)
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: (N|N)|(N|N)

- category: (N|PP)|(N|PP)
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: (N|PP)|(N|PP)

- category: (NP|NP)|(NP|NP)
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: (NP|NP)|(NP|NP)

- category: (NP|N)|(NP|N)
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: (NP|N)|(NP|N)

- category: ((S|NP)|NP)|((S|NP)|NP)
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: ((S|NP)|NP)|((S|NP)|NP)

- category: ((S|NP)|(S|NP))|((S|NP)|(S|NP))
  rule: conj
  child0_surf: ","
  semantics: \L R. R
  child1_category: ((S|NP)|(S|NP))|((S|NP)|(S|NP))

- category: (((S|NP)|(S|NP))|NP)|(((S|NP)|(S|NP))|NP)
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: (((S|NP)|(S|NP))|NP)|(((S|NP)|(S|NP))|NP)

- category: ((S|NP)|((S|NP)|NP))|((S|NP)|((S|NP)|NP))
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: ((S|NP)|((S|NP)|NP))|((S|NP)|((S|NP)|NP))


## Disjunction

- category: S|S
  rule: conj
  semantics: \L S2 S1 K. (S1(K) | S2(K))
  child0_surf: or

- category: NP|NP
  rule: conj
  semantics: \L Q2 Q1 F1 F2. (Q1(F1, F2) | Q2(F1, F2))
  child0_surf: or

- category: NP|NP
  rule: conj
  semantics: \L Q1 Q2 F1 F2. (Q2(F1, F2) | Q1(F1, F2))
  child0_surf: ","
  child_any_surf: or

- category: N|N
  rule: conj
  semantics: \L F2 F1 F x. (F1(F,x) | F2(F,x))
  child0_surf: or

- category: (S|NP)|(S|NP)
  rule: conj
  semantics: \L V2 V1 Q K. Q(\x.True, \x.(V1(\F1 F2.F2(x),K) | V2(\F1 F2.F2(x),K)))
  child0_surf: or

- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  rule: conj
  semantics: \L A1 A2 Q d1 d2 d3 H I J1 J2 K.(exists d1.A2(Q,d1,d1,_th(_u),H,\A1 A2 A3 x.(A1(x) & -A2),J1,J2,K) | exists d1.A1(Q,d1,d1,_th(_u),H,\A1 A2 A3 x.(A1(x) & -A2),J1,J2,K))
  child0_surf: or

- category: (N|N)|(N|N)
  rule: conj
  semantics: \L M2 M1 N1 F x. (M1(N1,F,x) | M2(N1,F,x))
  child0_surf: or

- category: PP|PP
  rule: conj
  semantics: \L K2 K1 e. (K1(e) | K2(e))
  child0_surf: or


## Rules for commas

# lp
- category: S
  rule: lp
  semantics: \L R. R

- category: S|S
  rule: lp
  semantics: \L R. R

- category: NP
  rule: lp
  semantics: \L R. R

- category: N
  rule: lp
  semantics: \L R. R

- category: S|NP
  rule: lp
  semantics: \L R. R

- category: (S|NP)|NP
  rule: lp
  semantics: \L R. R

- category: (S|NP)|(S|NP)
  rule: lp
  semantics: \L R. R

- category: (S|NP)|(S|NP)
  rule: lp
  semantics: \L V2 V1 Q K. Q(\x.True, \x.(V1(\F1 F2.F2(x),K) & V2(\F1 F2.F2(x),K)))
  child1_category: S|NP

- category: NP|NP
  rule: lp
  semantics: \L R. R
  # child1_category: NP|NP  

- category: NP|NP
  rule: lp
  semantics: \L Q2 Q1 F1 F2. (Q1(F1,F2) & Q2(F1,F2))
  child1_category: NP

- category: N|N
  rule: lp
  semantics: \L R. R

- category: PP|PP
  rule: lp
  semantics: \L R. R

- category: (NP|NP)|(NP|NP)
  rule: lp
  semantics: \L R. R

- category: NP
  rule: lp
  semantics: \L R. R
  child0_category: LQU

- category: N
  rule: lp
  semantics: \L R. R
  child0_category: LQU

# rp
- category: S
  rule: rp
  semantics: \L R. L

- category: NP
  rule: rp
  semantics: \L R. L

- category: N
  rule: rp
  semantics: \L R. L

- category: PP
  rule: rp
  semantics: \L R. L

- category: S|NP
  rule: rp
  semantics: \L R. L

- category: S|S
  rule: rp
  semantics: \L R. L

- category: NP|NP
  rule: rp
  semantics: \L R. L

- category: N|PP
  rule: rp
  semantics: \L R. L

- category: PP|NP
  rule: rp
  semantics: \L R. L

- category: (S|NP)|NP
  rule: rp
  semantics: \L R. L

- category: N
  rule: rp
  semantics: \L R. L
  child1_category: RQU

# "," NP => (S|NP)|(S|NP)
- category: (S|NP)|(S|NP)
  rule: ltc
  semantics: \L Q1 V Q2 K. (Q1(\x.True, \x.True) & Q2(\x.True, \x.(V(\F1 F2.F2(x),K))))

# rtc 
# NP "," => S|S
- category: S|S
  rule: rtc
  semantics: \L R S. S

# S|S "," => (S|NP)|(S|NP)
- category: (S|NP)|(S|NP)
  rule: rtc
  semantics: \L R V Q K. L(V(Q),K)

- category: N
  rule: funny
  semantics: \L R. R
  child0_surf: and

# ((S|NP)|S)|(S|NP) and (S|NP)|(S|NP) ==> ((S|NP)|S)|(S|NP)
- category: ((S|NP)|S)|(S|NP)
  rule: gbx
  semantics: \L R V. L(R(V))

# ((S|NP)|(S|NP))|(S|NP) and (S|NP)|(S|NP) ==> ((S|NP)|S)|(S|NP)
- category: ((S|NP)|(S|NP))|(S|NP)
  rule: gbx
  semantics: \L R V. L(R(V))

# ((S|NP)|PP)|NP and (S|NP)|(S|NP) ==> ((S|NP)|PP)|NP
- category: ((S|NP)|PP)|NP
  rule: gbx
  semantics: \L R V. L(R(V))

# ((S|NP)|NP)|((S|NP)|NP) and (S|NP)|(S|NP) ==> ((S|NP)|NP)|((S|NP)|NP)
- category: ((S|NP)|NP)|((S|NP)|NP)
  rule: gbx
  semantics: \L R V2 Q1 Q2 K. L(V2,Q1,Q2,\e.(R(\K1 K2.K2(e),\w.True,\w.True) & K(e)))

# N/N and (N/N)\(N/N) ==> (N/N)\(N/N)
- category: (N/N)\(N/N)
  rule: gfc
  semantics: \L R M F. L(R(M,F))

## NP and NP => NP
- category: NP
  rule: appo
  semantics: \Q1 Q2 F1 F2. Q1(\x.(Q2(\y.True,\y.(y = x)) & F1(x)),F2)

### Numeral adjectives ###

- category: N
  rule: fa
  semantics: \L R F x.(R(\x.True,x) & _many(x,L))
  child0_pos: CD
  child0_entity: B-CARDINAL
  #child1_pos: NNS
  child1_category: N

- category: N
  rule: fa
  semantics: \L R F x.(R(\x.True,x) & _many(x,L))
  child0_pos: CD
  child0_entity: O
  #child1_pos: NNS
  child1_category: N

- category: N
  rule: fa
  semantics: \L R. R
  child0_surf: one
  child1_category: N

- category: N
  rule: fa
  semantics: \L R F x.(R(\x.True,x) & _many(x,L))
  child0_child0_pos: CD
  child0_child0_entity: B-CARDINAL 
  child1_category: N

### Measure phrases ###

- category: N
  rule: fa
  semantics: \L R. L
  child0_pos: CD
  child1_surf: MIPS

- category: N
  rule: fa
  semantics: \L R. L
  child0_pos: CD
  child1_surf: feet

- category: N
  rule: fa
  semantics: \L R. L
  child0_pos: CD
  child1_surf: MPH

- category: N/N
  rule: fc
  semantics: \L R.$product(L,R)
  child0_pos: CD
  child1_base: "100"

- category: N/N
  rule: fa
  semantics: \L R.$product(L,R)
  child0_pos: CD
  child1_surf: million

# degree modifiers
- category: (S[adj=true]\NP)/(S[adj=true]\NP)
  rule: fa
  semantics: \L R A Q d1 d2 d3 H I J1 J2 K.all d1.A(Q,d1,$difference(d1,L),L,H,\A1 A2 A3 x.(-A2 -> A1(x)),\d.True,\d.True,K)
  child0_pos: CD
  child1_entity: I-QUANTITY

- category: (S[adj=true]\NP)/(S[adj=true]\NP)
  rule: fa
  semantics: \L R A Q d1 d2 d3 H I J1 J2 K.all d1.A(Q,d1,$difference(d1,L),L,H,\A1 A2 A3 x.(-A2 -> A1(x)),\d.True,\d.True,K)
  child0_pos: CD
  child1_entity: I-DATE

- category: (N/N)/(N[adj=true]/N)
  rule: fa
  semantics: \L R A N F x.exists d1 c.A(\A1 A2.N(\G.A1(G),x),d1,$difference(d1,L),L,\w.True,\A1 A2 A3.(A1 & -A2),\d.True,\d.True,c,x)
  child0_pos: CD
  child1_entity: I-QUANTITY

- category: (N/N)/(N[adj=true]/N)
  rule: fa
  semantics: \L R A N F x.exists d1 c.A(\A1 A2.N(\G.A1(G),x),d1,$difference(d1,L),L,\w.True,\A1 A2 A3.(A1 & -A2),\d.True,\d.True,c,x)
  child0_pos: CD
  child1_entity: I-DATE

- category: (N[adj=true]|N)|(N[adj=true]|N)
  rule: fa
  semantics: \L R A N d1 d2 d3 H I J1 J2 c x.all d1.exists c.A(N,d1,$difference(d1,L),L,H,\A1 A2 A3.(-A2 -> A1),J1,J2,c,x)
  child0_pos: CD
  child1_entity: I-QUANTITY

- category: (N[adj=true]|N)|(N[adj=true]|N)
  rule: fa
  semantics: \L R A N d1 d2 d3 H I J1 J2 c x.all d1.exists c.A(N,d1,$difference(d1,L),L,H,\A1 A2 A3.(-A2 -> A1),J1,J2,c,x)
  child0_pos: CD
  child1_entity: I-DATE

# - category: (N[nm=true]/N)/(N[adj=true]/N)
#   rule: fa
#   semantics: \L R A N F x.exists d1 c.A(\A1 A2.N(\G.F(G,L),x),d1,$difference(d1,L),L,\w.True,\A1 A2 A3.(A1 & -A2),\w.True,c,x)
#   child0_child1_pos: CD
#   child0_child0_pos: RB
#   child1_entity: I-QUANTITY

# - category: (N/N)/(N[adj=true]/N)
#   rule: fa
#   semantics: \L R A N F x.exists d1 c.A(\A1 A2.N(\G.F(G,L),x),d1,$difference(d1,L),L,\w.True,\A1 A2 A3.(A1 & -A2),\w.True,c,x)
#   child0_child1_pos: CD
#   child0_child0_surf: pos
#   child1_entity: I-QUANTITY

# - category: (N[adj=true]/N)/(N[adj=true]/N)
#   rule: fa
#   semantics: \L R A N d1 d2 d3 H I J1 J2 c x.all d1.exists c.A(N,d1,$difference(d1,L),L,H,\A1 A2 A3.(-A2 <-> A1),J,c,x)
#   child0_child1_pos: CD
#   child0_child0_surf: dgr
#   child1_entity: I-QUANTITY

- category: (N/N)/(N[adj=true]/N)
  rule: fa
  semantics: \L R A N F x.exists d1 c.all d2.A(\A1 A2.N(\G.A1(G),x),d1,d2,L,\w.True,\A1 A2 A3.(A1 & -A2 & (A3(x) -> $lesseq(d2,L))),\d.True,c,x)
  child0_child1_pos: CD
  child0_child0_pos: RB
  child1_entity: I-QUANTITY

### Implicature ###

- category: (N/N)/(N[adj=true]/N)
  rule: fa
  semantics: \L R A N F x.exists d1 c.all d2.A(\A1 A2.N(\G.A1(G),x),d1,d2,L,\w.True,\A1 A2 A3.(A1 & -A2 & (A3(x) -> $lesseq(d2,L))),\d.True,\d.True,c,x)
  child0_child1_pos: CD
  child0_child0_surf: pos
  child1_entity: I-QUANTITY

- category: (N[adj=true]/N)/(N[adj=true]/N)
  rule: fa
  semantics: \L R A N d1 d2 d3 H I J1 J2 c x.all d1.exists c.A(N,d1,$difference(d1,L),L,H,\A1 A2 A3.(-A2 <-> A1),J1,J2,c,x)
  child0_child1_pos: CD
  child0_child0_surf: dgr
  child1_entity: I-QUANTITY

#####################

- category: (S[adj=true]\NP)/(S[adj=true]\NP)
  rule: fa
  semantics: \L R A Q d1 d2 d3 H I J1 J2 K. exists d1. A(Q,d1,d1,d1,\H1 d.True,\A1 A2 A3 x.(A1(x) & A3),\W.W(L),\d.True,K)
  child0_child0_surf: more~than
  child0_child1_pos: CD
  child1_entity: I-QUANTITY

- category: (S[adj=true]\NP)/(S[adj=true]\NP)
  rule: fa
  semantics: \L R A Q d2 d1 d3 H I J1 J2 K. -A(Q,L,d1,d1,H,\A1 A2 A3.A1,\d.True,\d.True,K)
  child0_child0_surf: less~than
  child0_child1_pos: CD
  child1_entity: I-QUANTITY

- category: (S[adj=true]\NP)/(S[adj=true]\NP)
  rule: fa
  semantics: \L R A Q d1 d2 d3 H I J1 J2 K. Q(\x.True, \y.all d1 d2.A(Q,d1,d2,L,\H d.H(y,d),\A1 A2 A3 x.((-A2 -> A1(y)) & (A3 -> $lesseq(d2,L))),\d.True,\d.True,K))
  child0_child0_surf: exactly
  child0_child1_pos: CD
  child1_entity: I-QUANTITY

### Implicature ###

- category: (S[adj=true]\NP)/(S[adj=true]\NP)
  rule: fa
  semantics: \L R A Q d1 d2 d3 H I J1 J2 K. Q(\x.True, \y.all d1 d2.A(Q,d1,d2,L,\H d.H(y,d),\A1 A2 A3 x.((-A2 -> A1(y)) & (A3 -> $lesseq(d2,L))),\d.True,\d.True,K))
  child0_child0_surf: pos
  child0_child1_pos: CD
  child1_entity: I-QUANTITY

- category: (S[adj=true]\NP)/(S[adj=true]\NP)
  rule: fa
  semantics: \L R A Q d1 d2 d3 H I J1 J2 K.all d1.A(Q,d1,$difference(d1,L),L,H,\A1 A2 A3 x.(-A2 <-> A1(x)),\d.True,\d.True,K)
  child0_child0_surf: dgr
  child0_child1_pos: CD
  child1_entity: I-QUANTITY

####################

- category: (S[adj=true]\NP)/(S[adj=true]\NP)
  rule: fa
  semantics: \L R A Q d1 d2 d3 H I J1 J2 K. exists d1. A(Q,d1,d1,d1,H,\A1 A2 A3 x.(A1(x) & $less($difference(L,_d0),d1) & $less(d1,$sum(L,_d0))),\d.True,\d.True,K)
  child0_child0_surf: about
  child0_child1_pos: CD
  child1_entity: I-QUANTITY

- category: (S[adj=true]\NP)/(S[adj=true]\NP)
  rule: fa
  semantics: \L R A Q d1 d2 d3 H I J1 J2 K.all d1.A(Q,d1,$difference(d1,_d0),d3,H,\A1 A2 A3 x.(-A2 -> A1(x)),J1,J2,K)
  child0_surf: very
  child1_surf: much

### Adverbs ###

- category: (NP/N)/(N/N)
  rule: fa
  semantics: \L R d N F1 F2.exists x.(N(\x.True,x) & _many(x,d) & F1(x) & F2(x))
  child0_surf: at
  child1_surf: least

- category: NP|N
  rule: fa
  semantics: \L R N F1 F2.exists x.(N(\x.True,x) & _many(x,R) & F1(x) & F2(x))
  child0_child0_surf: at
  child0_child1_surf: least
  child1_pos: CD

- category: NP|N
  rule: fa
  semantics: \L R N F1 F2.-exists x.(N(\x.True,x) & _many(x,$sum(R,1)) & F1(x) & F2(x))
  child0_surf: at~most
  child1_pos: CD

- category: NP/NP
  rule: fa
  semantics: \L R X. X
  child0_surf: at
  child1_surf: least

- category: NP/N
  rule: fc
  semantics: \L R. L 
  child0_surf: a
  child1_surf: few

- category: NP/N
  rule: fa
  semantics: \L R N F1 F2. all d1.(L(d1,N,F1,-F2) -> L(d1,N,F1,F2))
  # child0_category: (NP/N)/(N/N)
  child0_child0_surf: at
  child0_child1_surf: least
  child1_surf: half

- category: NP/N
  rule: fa
  semantics: \L R N F1 F2.-exists d1.(exists x.(N(\x.True,x) & _many(x,d1) & F1(x) & F2(x)) & -exists x.(N(\x.True,x) & _many(x,d1) & F1(x) & -F2(x)))
  child0_category: (NP/N)/(N/N)
  child0_surf: at~most
  child1_surf: half

- category: NP/NP
  rule: fa
  semantics: \L R Q F1 F2.-exists d1.(Q(\x.(_many(x,d1) & F1(x)),F2) & -Q(\x.(_many(x,d1) & F1(x)),-F2))
  child0_category: (NP/NP)/(N/N)
  child0_surf: at~most
  child1_surf: half

- category: NP/NP
  rule: fa
  semantics: \L R Q F1 F2.all d1.(Q(\x.(_many(x,d1) & F1(x)),-F2) -> Q(\x.(_many(x,d1) & F1(x)),F2))
  child0_category: (NP/NP)/(N/N)
  child0_surf: at~least
  child1_surf: half

- category: N|N
  rule: fa
  semantics: \L R N F x.exists d1.N(\G.(_many(x,d1) & $less($difference(R,_d0),d1) & $less(d1,$sum(R,_d0)) & F(G)),x)
  child0_category: (N|N)|(N|N)
  child1_pos: CD
  child0_surf: about

- category: N[nm=true]|N
  rule: fa
  # semantics: \L R N F x.(N(\Q.F(Q,R),x) & _many(x,R))
  # semantics: \L R N F x.N(\Q.F(Q,R),x)
  semantics: \L R N I. I(\F x.N(\C.F(C,R),x), R)
  child0_category: (N[nm=true]|N)|(N|N)
  child0_pos: RB
  child1_any_pos: CD

### Implicature ###

- category: N[nm=true]|N
  rule: fa
  semantics: \L R N I. I(\F x.N(\C.F(C,R),x), R)
  child0_category: (N[nm=true]|N)|(N|N)
  child0_surf: pos
  child1_any_pos: CD

###################

# - category: (N/N)/(N/N)
#   rule: ba
#   semantics: \L R d2 N F x.exists d1.N(\d.(_many(x,d1) & $less(d2,d1)),x)
#   child0_child1_surf: more
#   child1_surf: than
#   child0_category: S[adj=true]\NP

# - category: (N[down=true]/N)/(N/N)
#   rule: ba
#   semantics: \L R d1 N F x. N(\d2._many(x,d1),x)
#   child0_child1_surf: less
#   child1_surf: than
#   child0_category: S[adj=true]\NP

# - category: (N[down=true]/N)/(N/N)
#   rule: ba
#   semantics: \L R d1 N F x. N(\d2._many(x,d1),x)
#   child0_child1_surf: fewer
#   child1_surf: than
#   child0_category: S[adj=true]\NP

- category: N/N
  rule: fa
  semantics: \L R N F x.exists d1.N(\d.(_many(x,d1) & $less(R,d1)),x)
  child0_child0_child1_surf: more
  child0_child1_surf: than
  child0_category: (N/N)/(N/N)

- category: N[down=true]/N
  rule: fa
  semantics: \L R N F x. N(\d2._many(x,R),x)
  child0_child0_child1_surf: less
  child0_child1_surf: than
  child0_category: (N[down=true]/N)/(N/N)

- category: N[down=true]/N
  rule: fa
  semantics: \L R N F x. N(\d2._many(x,R),x)
  child0_child0_child1_surf: fewer
  child0_child1_surf: than
  child0_category: (N[down=true]/N)/(N/N)
  
- category: N
  rule: fa
  semantics: \L R F x. exists d1.(_many(x,d1) & $less(R,d1))
  child0_child0_surf: more
  child0_child1_surf: than
  child1_pos: CD

- category: N
  rule: fa
  semantics: \L R F x.exists d1.(_many(x,d1) & $less(d1,R))
  child0_child0_surf: less
  child0_child1_surf: than
  child1_pos: CD

- category: ((S\NP)\(S\NP))/((S[adv=true]\NP)\(S[adv=true]\NP))
  rule: fa
  semantics: \L R A V Q K.all d1.Q(\x.True,\x.(-A(\F1 F2.F2(e),Q,d1,d1,L,H,\A1 A2 A3.A2,\d.True,\d.True,K) -> A(V,\F1 F2.F2(x),d1,d1,_th(_u),H,\A1 A2 A3.A1,\d.True,\d.True,K)))
  child0_pos: CD
  child1_surf: MPH

### Implicature ###

- category: ((S\NP)\(S\NP))/((S[adv=true]\NP)\(S[adv=true]\NP))
  rule: fa
  semantics: \L R A V Q K.all d1 d2.Q(\x.True,\x.exists e1.(-A(\F1 F2.F2(e),Q,d1,d1,L,H,\A1 A2 A3.A2,\x.True,\d.True,K) -> A(V,\F1 F2.F2(x),d1,d2,_th(_u),\H d.H(e1,d),\A1 A2 A3.(A1 & (A3 -> $lesseq(d2,L))),\d.True,\d.True,\e.((e = e1) & K(e)))))
  child0_child0_surf: pos
  child0_child1_pos: CD
  child1_surf: MPH

###################

- category: ((S[adv=true]\NP)\(S[adv=true]\NP))/((S[adv=true]\NP)\(S[adv=true]\NP))
  rule: fa
  semantics: \L R A V Q d1 d2 d3 H I1 J1 J2 K.Q(\x.True, \x.all d1.A(V,\F1 F2.F2(x),d1,$difference(d1,L),_th(_u),H,\A1 A2 A3.I1(A2,\I2.(-I2 -> A1)),J1,J2,K))
  child0_pos: CD
  child1_surf: MPH

### Implicature ###

- category: ((S[adv=true]\NP)\(S[adv=true]\NP))/((S[adv=true]\NP)\(S[adv=true]\NP))
  rule: fa
  semantics: \L R A V Q d1 d2 d3 H I1 J1 J2 K.Q(\x.True, \x.all d1.A(V,\F1 F2.F2(x),d1,$difference(d1,L),_th(_u),H,\A1 A2 A3.I1(A2,\I2.(-I2 <-> A1)),J1,J2,K))
  child0_child0_surf: dgr
  child0_child1_pos: CD
  child1_surf: MPH

###################

# one or more
- category: N/N
  rule: ba
  semantics: \L R P F x. (P(F,x) & _many(x,1))
  child0_surf: one
  child1_child0_surf: or
  child1_child1_surf: more

- category: (N/N)\(N/N)
  rule: conj
  # semantics: \L R P F x. (P(F,x) & _many(x,1))
  semantics: \L R X. X
  child0_surf: or
  child1_surf: more

## the + N ##

- category: NP
  rule: fa
  semantics: \L R F1 F2. (F1(R) & F2(R))
  child0_surf: the
  child1_pos: NNP
  child1_entity: B-ORG

########## Sentence final operation ###########

- category: S
  rule: rp
  semantics: \L R. L(\e.True)
  root: "true"

- category: S
  rule: lp
  semantics: \L R. R(\e.True)
  root: "true"

- category: S
  rule: ba
  semantics: \L R. R(L,\e.True)
  root: "true"

- category: S
  rule: fa
  semantics: \L R. L(R,\e.True)
  root: "true"

- category: NP
  rule: rp
  semantics: \L R. L(\x.True,\x.True)
  root: "true"

- category: NP
  rule: fa
  semantics: \L R. L(R,\x.True,\x.True)
  child_any_category: NP
  root: "true"

- category: NP
  rule: ba
  semantics: \L R. R(L,\x.True,\x.True)
  child_any_category: NP
  root: "true"

- category: S|NP
  rule: rp
  semantics: \L R. R(\F1 F2.exists x.F2(x),\e.True)
  root: "true"

- category: S|NP
  rule: fc
  semantics: \L R. exists x. L(R(\F1 F2.F2(x)),\e.True)
  child0_category: S|(S|NP)
  child1_category: (S|NP)|NP
  root: "true"

- category: S|NP
  rule: fa
  semantics: \L R. L(R,\F1 F2.exists x.F2(x),\e.True)
  root: "true"

- category: S|NP
  rule: ba
  semantics: \L R. R(L,\F1 F2.exists x.F2(x),\e.True)
  root: "true"

- category: S|NP
  rule: rp
  semantics: \L R. L(\F1 F2.exists x.F2(x),\e.True)
  root: "true"

- category: S|S
  rule: fa
  semantics: \L R. L(R,\K.exists e.K(e),\e.True)
  root: "true"

- category: (S|NP)|((S|NP)|NP)
  rule: bc
  semantics: \L R. R(L(\C1 C2 K.exists e.C2(\x.True,\x.((Subj(e) = x) & K(e)))),\F1 F2.exists x.F2(x),\e.True)
  root: "true"

- category: (S|NP)|((S|NP)|NP)
  rule: ba
  semantics: \L R. R(L,\C1 C2 K.exists e.C2(\x.True,\x.((Subj(e) = x) & K(e))),\F1 F2.exists x.F2(x),\e.True)
  root: "true"

# - category: S
#   rule: rp
#   semantics: \L R. L
#   child1_surf: "?"


############### Semantic Templates  ###############

##### Templates for NPs #####

## Common nouns
- category: N
  # semantics: \E x. E(x)
  semantics: \E F x. (E(x) & F(E))

- category: N
  semantics: \E F x.(x = x)
  surf: one

## Proper nouns
- category: N
  semantics: \E. E
  pos: NNP

# - category: N
#   semantics: \E F x. ((x = E) & F(E))
#   pos: NNP
#   entity: B-PERSON

- category: N
  semantics: \E F x. ((E = x) & F(E))
  pos: NNP
  entity: I-PERSON

- category: N
  semantics: \E F x. (E(x) & F(E))
  pos: NNP
  entity: I-ORG

- category: N
  # semantics: \E x. E(x)
  # semantics: \E. E
  semantics: \E F x. (E(x) & F(E))
  entity: B-NORP

- category: N
  semantics: \E F x. (E(x) & F(E))
  entity: B-LOC

- category: N
  semantics: \E F x. (E(x) & F(E))
  entity: B-GPE

- category: N
  semantics: \E. E
  entity: B-ORG

- category: N
  semantics: \E. E
  pos: CD

- category: N[num=true]
  semantics: \E F x. ((x = E) & F(E))
  pos: CD

## default existential interpretation
- category: NP
  semantics: \E F1 F2. exists x. (E(x) & F1(x) & F2(x))

## Pronouns
- category: NP
  semantics: \E F1 F2. exists x. ((E = x) & F1(x) & F2(x))
  pos: PRP

- category: NP|NP
  semantics: \E Q F1 F2. Q(\x.(E(x) & F1(x)), F2)

- category: NP|NP
  semantics: \E Q F1 F2. -Q(\x.F1(x), F2)
  surf: quite
  pos: PDT

- category: N|NP
  # semantics: \E Q x. Q(\y.True,\y.(E(y) & (y = x)))
  semantics: \E Q F x. Q(\y.True,\y.(E(y) & (y = x)))

- category: (NP|NP)|(NP|NP) 
  semantics: \E M Q F1 F2. Q(\x.(E(x) & M(\G1 G2.G1(x),\w.True,\w.True) & F1(x)), F2)

- category: ((NP|NP)|(NP|NP))|NP
  semantics: \E Q1 M Q2 F1 F2. Q2(\y.True,\y.Q1(\x.(E(x,y) & M(\G1 G2.G1(x),\w.True,\w.True) & F1(x)), F2))


##### Templates for Determiners #####

## default existential interpretation
- category: NP|N
  semantics: \E N F1 F2. exists x. (N(\x.True,x) & F1(x) & F2(x))


##### Templates for Adverbs #####

- category: (N|N)|(N|N) 
  semantics: \E A N F x.exists d1.exists c.A(\A1 A2.N(\G.(A1(G) & E(x)),x),F,x)

- category: (N|N)|(N|N) 
  semantics: \E A N F x.exists d1.exists c.A(\A1 A2.N(\G.(A1(G) & (E = x)),x),F,x)
  entity: B-PERCENT

- category: (N|N)|(N[adj=true]|N) 
  semantics: \E A N F x.exists d1.exists c.A(\A1 A2.N(\G.(A1(G) & E(x) & (d1 = _th(G)) & F(G)),x),d1,d1,d1,\x.True,\A1 A2 A3.A1,\d.True,\d.True,c,x)

# - category: (N[nm=true]|N)|(N|N) 
#   semantics: \E d N F x.(N(\Q.F(Q,d),x) & _many(x,d))

- category: (N|N)|(N[adj=true]|N) 
  semantics: \E A N F x.exists d1 d2.exists c.A(\A1 A2.N(\G.(A1(G) & (d2 = _th(G)) & F(G)),x),d1,d1,d1,\x.True,\A1 A2 A3.A1,\d.True,\W.W(d2),c,x)
  surf: very

- category: (N[down=true]|N)|(N[adj=true]|N) 
  semantics: \E A N F x.exists d1.exists c.A(N,d1,d1,d1,\x.True,\A1 A2 A3.A1,\d.True,\d.True,c,x)
  surf: not

- category: (N|N)|(N[adj=true]|N) 
  semantics: \E A N F x.exists d1.exists c.A(\A1 A2.N(\G.(A1(G) & (d1 = _th(G)) & F(G)),x),d1,d1,d1,\x.True,\A1 A2 A3.A1,\d.True,\d.True,c,x)
  surf: pos

# ex. John bought a dgr higher desk.
- category: (N|N)|(N[adj=true]|N) 
  semantics: \E A N F x.exists d1.exists c.A(\A1 A2.N(\G.(A1(G) & (d1 = _th(G)) & F(G)),x),d1,d1,d1,\x.True,\A1 A2 A3.A1,\d.True,\d.True,c,x)
  surf: dgr

- category: (N|N)|(N[adj=true]|N) 
  semantics: \E A N F x.exists d1 d2.exists c.A(\A1 A2.N(\G.(A1(G) & (d2 = _th(G)) & F(G)),x),d1,d1,d1,\x.True,\A1 A2 A3.A1,\d.True,\W.W(d2),c,x)
  surf: so

- category: (N[adj=true]|N)|(N[adj=true]|N) 
  semantics: \E A N d1 d2 d3 H I J1 J2 c x.exists d1.exists c.A(N,d1,d1,d1,H,\A1 A2 A3.(A1 & A2),J1,J2,c,x)
  surf: dgr

- category: (N[adj=true]|N)|(N[adj=true]|N) 
  semantics: \E A N d1 d2 d3 H I J1 J2 c x.all d1.exists c.A(N,d1,$difference(d1,_d0),d1,H,\A1 A2 A3.(-A2 -> A1),J1,J2,c,x)
  surf: much

# - category: (N[adj=true]/N)/(N[adj=true]/N) 
#   semantics: \E A N F d1 d2 d3 I J W1 W2 c.all d1.exists c.A(N,F,$sum(d1,_d0),d1,d1,\A1 A2 A3.(A2 -> A1),\w.True,W1,W2,c)
#   surf: many

# ex. John is a more expensive car than Bob is.
- category: (N[adj=true]|N)|(N[adj=true]|N)
  semantics: \E A N d1 d2 d3 H I J1 J2 c x.A(N,d1,d2,d3,H,\A1 A2 A3.I(A1,H(A3),A2),J1,\d.True,c,x)
  surf: more

- category: (N[adj=true]|N)|(N[adj=true]|N)
  semantics: \E A N d1 d2 d3 H I J1 J2 c x.A(N,d1,d2,d3,H,\A1 A2 A3.I(-A1,H(\y.-A3(y)),A2),J1,\d.True,c,x)
  surf: less

- category: (S|NP)|(S|NP)
  semantics: \E V Q K. V(Q, \e.(E(e) & K(e)))

- category: (S|NP)|(S[adj=true]|NP)
  semantics: \E A Q K. Q(\x.True,\x.(A(\F1 F2.F2,z,z,z,H,I,J1,J2,\e.True) & exists e.(E(e) & (Subj(e) = Subj(e)) & K(e))))

- category: (S[adv=true]|NP)|(S[adv=true]|NP)
  # semantics: \E V Q d1 d2 d3 H I J1 J2 K.V(Q,\e.I((E(e,d1) & K(e)),-(d1 = d3),(H(E,d2) & J1(\d4.$less(d4,d1)) & J2(\d4.$less(d4,d1)))))
  semantics: \E V Q d1 d2 d3 H I J1 J2 K.V(Q,\e.I((E(e,d1) & K(e)),-(d1 = d3),(H(E,d2) & J1(\d4.$less(d4,d1)) & J2(\d4.$lesseq($sum(d4,_d0),d1)))))
  pos: RB
  entity: POS

- category: (S[adv=true]|NP)|(S[adv=true]|NP)
  # semantics: \E V Q d2 d1 d3 H I J1 J2 K.V(Q,\e.I((E(e,d1) & K(e)),-(d1 = d3),(H(E,d2) & J1(\d4.(d1 = d4)) & J2(\d4.$less(d1,d4)))))
  semantics: \E V Q d2 d1 d3 H I J1 J2 K.V(Q,\e.I((E(e,d1) & K(e)),-(d1 = d3),(H(E,d2) & J1(\d4.(d1 = d4)) & J2(\d4.$lesseq(d1,$difference(d4,_d0))))))
  pos: RB
  entity: NEG

- category: (S[adv=true]|NP)|(S[adv=true]|NP)
  semantics: \E V Q d1 d2 d3 H I J1 J2 K.V(Q,\e.I((E(e,d1) & K(e)),(H(E,d2) & J1(\d4.$less(d4,d1))),-(d1 = d3)))
  pos: RBR
  entity: POS

- category: (S[adv=true]|NP)|(S[adv=true]|NP)
  semantics: \E V Q d2 d1 d3 H I J1 J2 K.V(Q,\e.I((E(e,d1) & K(e)),(H(E,d2) & J1(\d4.(d1 = d4))),-(d1 = d3)))
  pos: RBR
  entity: NEG

- category: (S\NP)\(S\NP)
  # semantics: \E V Q. Q(\x.True, \x.exists d1.(E(x,d1) & V(\F1 F2.F2(x))))
  semantics: \E V Q K. V(Q, \e.exists d1.(E(e,d1) & K(e)))
  pos: JJ

# - category: (S\NP)/(S\NP)
#   semantics: \E V Q. exists d.Q(\x.True, \x.(E(x,d) & V(\F1 F2.F2(x))))
#   pos: JJ

- category: (S[adj=true]|NP)|(S|NP)
  semantics: \E T Q d1 d2 d3 H I J1 J2 K.exists d1.T(\F1 F2.Q(F1,\x.(E(x,d1) & F2(x))))
  pos: JJ

- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  semantics: \E A Q d1 d2 d3 H I J1 J2 K.exists d1.A(\F1 F2.Q(F1,\x.(E(x,d1) & F2(x))),d1,d1,d1,\H1 d.True,\A1 A2 A3 x.A1(x),\d.True,\d.True,K)
  pos: JJ

- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  semantics: \E A Q d1 d2 d3 H I J1 J2 K.exists d1.A(Q,d1,d1,_th(_u),H,\A1 A2 A3 x.(A1(x) & -A2 & E(x)),J1,J2,K)
  pos: RB
  
# John is dgr taller than Bob .
- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  # semantics: \E A Q d1 d2 d3 H I J1 J2 K.exists d1.A(Q,d1,d1,_th(_u),H,\A1 A2 A3 x.(A1(x) & A2),J1,J2,K)
  semantics: \E A Q d1 d2 d3 H I J1 J2 K.Q(\x.True, \x.exists d1.A(\F1 F2.F2,d1,d1,_th(_u),H,\A1 A2 A3 x.(A1(x) & A2),J1,J2,K,x))
  surf: dgr
  pos: EMP

# John is pos tall .
- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  semantics: \E A Q d1 d2 d3 H I J1 J2 K.Q(\x.True, \x.exists d1.A(\F1 F2.F2,d1,d1,_th(_u),H,\A1 A2 A3 x.(A1(x) & -A2),J1,J2,K,x))
  surf: pos
  pos: EMP

# ex. John is dgr2 as tall as Bob .
- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  semantics: \E A Q d1 d2 d3 H I J1 J2 K.all d1.A(Q,d1,d1,_th(_u),H,\A1 A2 A3 x.(-A2 -> A1(x)),J1,J2,K)
  surf: dgr2
  pos: EMP

- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  semantics: \E A Q d1 d2 d3 H I J1 J2 K.exists e.Q(\x.True, \x.exists d1.A(\F1 F2.F2,d1,d1,d1,\H1 d.True,\A1 A2 A3 x.(A1(x) & A3),\d.True,\W.W(_th(_u)),K,x))
  surf: very

- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  semantics: \E A Q d1 d2 d3 H I J1 J2 K.all d1.A(Q,d1,$difference(d1,_d0),d3,H,\A1 A2 A3 x.(-A2 -> A1(x)),J1,J2,K)
  surf: much

- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  semantics: \E A Q d1 d2 d3 H I J1 J2 K. A(Q,d1,d2,d3,H,\A1 A2 A3.I(A1,A3,A2),J1,J2,K)
  surf: more

- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  semantics: \E A Q d1 d2 d3 H I J1 J2 K.A(Q,d1,d1,d1,H,\A1 A2 A3.I(\x.-A1(x),-A3,A2),J1,J2,K)
  surf: less

- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  semantics: \E A Q d1 d2 d3 H I J1 J2 K. A(Q,d1,d2,d3,H,\A1 A2 A3.I(A1,A3,A2),J1,J2,K)
  surf: as
  pos: RB

# ex. John won many more orders than Bob.
- category: (NP[adj=true]|N)|(NP[adj=true]|N)
  # semantics: \E A N V Q d1 d2 I K.all d1.A(N,V,Q,$sum(d1,_d0),d1,\A1 A2 z2 z1.(exists y.A2(y,z2) -> exists x.A1(x,z1)),K)
  semantics: \E A N F1 F2 V Q d1 d2 H I J K.all d1.A(N,F1,F2,V,Q,$sum(d1,_d0),d1,H,\A1 A2 z2 z1.(exists y.A2(y,z2) -> exists x.A1(x,z1)),J,K)
  surf: many

# John won dgr more orders than Bob .
- category: (NP[adj=true]|N)|(NP[adj=true]|N)
  # semantics: \E A N V Q d1 d2 I K.exists d1.A(N,V,Q,d1,d1,\A1 A2 z2 z1.(exists x.A1(x,z1) & -exists y.A2(y,z2)),K)
  semantics: \E A N F1 F2 V Q d1 d2 H I J K.exists d1.A(N,F1,F2,V,Q,d1,d1,H,\A1 A2 z2 z1.(exists x.A1(x,z1) & -exists y.A2(y,z2)),J,K)
  surf: dgr
  pos: EMP

# John won dgr2 as many orders as Bob .
- category: (NP[adj=true]|N)|(NP[adj=true]|N)
  # semantics: \E A N V Q d1 d2 I K.all d1.A(N,V,Q,d1,d1,\A1 A2 z2 z1.(exists y.A2(y,z2) -> exists x.A1(x,z1)),K)
  semantics: \E A N F1 F2 V Q d1 d2 H I J K.all d1.A(N,F1,F2,V,Q,d1,d1,H,\A1 A2 z2 z1.(exists y.A2(y,z2) -> exists x.A1(x,z1)),J,K)
  surf: dgr2
  pos: EMP

- category: S|S
  semantics: \E S K. S(\e.(E(e) & K(e)))

- category: S|S
  semantics: \E S K. E(S(K))
  pos: RB
  surf: supposedly

- category: S|S
  semantics: \E S K. E(S(K))
  pos: RB
  surf: probably

- category: S|S
  semantics: \E S K. E(S(K))
  pos: RB
  surf: hopefully

- category: S|S
  semantics: \E S K. E(S(K))
  pos: RB
  surf: maybe

- category: (S|S)|NP
  semantics: \E Q S K. S(\e.(Q(\x.True, \x.E(e,x)) & K(e)))

- category: (S|S)|(S|S)
  semantics: \E M S K1. S(\e.((E(e) & M(\K2.K2(e),\e.True)) & K1(e)))

- category: ((S|S)|(S|S))|NP
  semantics: \E Q M S K1. S(\e.Q(\x.True, \x.(E(e,x) & M(\K2.K2(e),\e.True) & K1(e))))

- category: (S|S)|(S|NP)
  semantics: \E V S K. S(\e1.(E(e1) & exists x. V(\F1 F2.F2(x), \e2.(Subj(e2) = Subj(e1))) & K(e1)))

- category: ((S|S)|(S|NP))|NP
  semantics: \E Q V S K. S(\e1.(E(e1) & Q(\x.True,\x.V(\F1 F2.F2(x),\e2.(Subj(e2) = Subj(e1)))) & K(e1)))

- category: ((S|NP)|(S|NP))|((S|NP)|(S|NP))
  semantics: \E A V Q K. Q(\x.True, \x.(A(V,\F1 F2.(F2(x) & E(x)),K)))

### Implicature ###

- category: ((S[adj=true]|NP)|(S[adj=true]|NP))|((S[adj=true]|NP)|(S[adj=true]|NP))
  semantics: \E D A Q d1 d2 d3 H I J1 J2 K.D(\Q d1 d2 d3 H I J1 J2 K.A(Q,d1,d2,d3,H,\A1 A2 A3 x.(-A2 <-> A1(x)),J1,J2,K),Q,d1,d2,d3,H,I,J1,J2,K)
  surf: dgr
  pos: EMP

- category: ((S[adj=true]|NP)|(S[adj=true]|NP))|((S[adj=true]|NP)|(S[adj=true]|NP))
  semantics: \E D A Q d1 d2 d3 H I J1 J2 K.(D(A,Q,d1,d2,d3,H,I,J1,J2,K) & all d2.D(\Q d1 d2 d3 H I J1 J2 K.A(Q,d1,d2,d3,H,\A1 A2 A3.I(\x.(A1(x) -> exists d.(-H(True,d) & $lesseq(d2,d))),True,-True),J1,J2,K),Q,d2,d2,d3,H,I,J1,J2,K))
  surf: dgr2
  pos: EMP

###################

- category: ((S[adv=true]|NP)|(S[adv=true]|NP))|((S[adv=true]|NP)|(S[adv=true]|NP))
  semantics: \E A V Q K.Q(\x.True, \x.exists d1.A(V,\F1 F2.F2(x),d1,d1,d1,\x.True,\A1 A2 A3.A1,\d.True,\W.W(_th(_u)),K))
  pos: RB

- category: ((S[adv=true]|NP)|(S[adv=true]|NP))|((S[adv=true]|NP)|(S[adv=true]|NP))
  semantics: \E A V Q d1 d2 d3 H I J1 J2 K.A(V,Q,d1,d2,d3,H,\A1 A2 A3.I(A1,A3,A2),J1,J2,K)
  pos: RBR
  surf: more

- category: ((S[adv=true]|NP)|(S[adv=true]|NP))|((S[adv=true]|NP)|(S[adv=true]|NP))
  semantics: \E A V Q d1 d2 d3 H I J1 J2 K.A(V,Q,d1,d2,d3,H,\A1 A2 A3.I(-A1,-A3,A2),J1,J2,K)
  pos: RBR
  surf: less

- category: ((S|NP)|(S|NP))|((S[adv=true]|NP)|(S[adv=true]|NP))
  semantics: \E A V Q K.Q(\x.True, \x.exists d1.A(V,\F1 F2.F2(x),d1,d1,_th(_u),H,\A1 A2 A3.(A1 & -A2),\d.True,\d.True,K))
  pos: EMP
  surf: pos

- category: ((S|NP)|(S|NP))|((S[adv=true]|NP)|(S[adv=true]|NP))
  # semantics: \E A V Q K.Q(\x.True,\x.exists d1.A(V,\F1 F2.F2(x),d1,d1,d1,\w1 w2.True,\A1 A2 A3.(A1 & A3),\w.True,\W.W(_th(_u)),K))
  semantics: \E A V Q K.Q(\x.True,\x.V(\F1 F2.F2(x),\e.exists d1.A(\F1 F2.F2(e),Q,d1,d1,d1,\H1 d.True,\A1 A2 A3.(A1 & A3),\d.True,\W.W(_th(_u)),K)))
  pos: RB
  surf: very

- category: ((S[adv=true]|NP)|(S[adv=true]|NP))|((S[adv=true]|NP)|(S[adv=true]|NP))
  semantics: \E A V Q d1 d2 d3 H I1 J1 J2 K.Q(\x.True, \x.exists d1.A(V,\F1 F2.F2(x),d1,d1,d1,H,\A1 A2 A3.I1(A2,\I2.(I2 & A1)),J1,J2,K))
  pos: EMP
  surf: dgr

- category: ((S[adv=true]|NP)|(S[adv=true]|NP))|((S[adv=true]|NP)|(S[adv=true]|NP))
  semantics: \E A V Q d1 d2 d3 H I1 J1 J2 K.Q(\x.True, \x.all d1.A(V,\F1 F2.F2(x),d1,d1,_th(_u),H,\A1 A2 A3.I1(A2,\I2.(I2 -> A1)),J1,J2,K))
  pos: EMP
  surf: dgr2

- category: ((S[adv=true]|NP)|(S[adv=true]|NP))|((S[adv=true]|NP)|(S[adv=true]|NP))
  semantics: \E A V Q d1 d2 d3 H I1 J1 J2 K.Q(\x.True, \x.all d1.A(V,\F1 F2.F2(x),$product(d1,2),d1,_th(_u),H,\A1 A2 A3.I1(A2,\I2.(I2 -> A1)),J1,J2,K))
  pos: RB
  surf: twice

- category: ((S[adv=true]|NP)|(S[adv=true]|NP))|((S[adv=true]|NP)|(S[adv=true]|NP))
  semantics: \E A V Q d1 d2 d3 H I J1 J2 K.A(V,Q,d1,d2,d3,H,\A1 A2 A3.I(A1,A3,A2),J1,J2,K)
  surf: as

- category: ((S[adv=true]|NP)|(S[adv=true]|NP))|((S[adv=true]|NP)|(S[adv=true]|NP))
  semantics: \E A V Q d1 d2 d3 H I1 J1 J2 K.Q(\x.True, \x.all d1.A(V,\F1 F2.F2(x),d1,$difference(d1,_d0),_th(_u),H,\A1 A2 A3.I1(A2,\I2.(-I2 -> A1)),J1,J2,K))
  pos: RB
  surf: much

### Implicature ###

- category: (((S[adv=true]|NP)|(S[adv=true]|NP))|((S[adv=true]|NP)|(S[adv=true]|NP)))|(((S[adv=true]|NP)|(S[adv=true]|NP))|((S[adv=true]|NP)|(S[adv=true]|NP)))
  semantics: \E D A V Q d1 d2 d3 H I1 J1 J2 K.D((\V Q d1 d2 d3 H I J1 J2 K.A(V,Q,d1,d2,d3,H,\A1 A2 A3.I1(A2,\I2.(I2 <-> A1)),J1,J2,K)),V,Q,d1,d2,d3,H,I1,J1,J2,K)
  surf: dgr
  pos: EMP

##################

- category: (((S|NP)|(S|NP))|((S|NP)|(S|NP)))|(S|NP)
  semantics: \E V1 A V2 Q K. Q(\x.True, \x.(A(V2,\F1 F2.(F2(x) & E(x)),K) & V1(\F1 F2.F2(x), \e.True)))

- category: ((S|NP)|(S|NP))|(S|NP)
  semantics: \E V1 V2 Q K. Q(\x.True,\x.(V1(\F1 F2.F2(x),\e.True) & V2(\F1 F2.F2(x),K)))
  # semantics: \E V1 V2 Q K. Q(\x.True,\x.(V2(\F1 F2.F2(x),K) & V1(\F1 F2.F2(x),\e.True)))
  # semantics: \E V1 V2 Q K. Q(\x.True,\x.V1(\F1 F2.(V2(\G1 G2.G2(x),\e.True) & F2(x)),K)) # preposition
  # semantics: \E V1 V2 Q K. Q(\x.(V1(\F1 F2.F2(x),\e.True) & V2(\F1 F2.F2(x),\e.True)),K) # relative claus
  # semantics: \E V1 V2 Q K. Q(\x.True,\x.((V1(\F1 F2.F2(x),\e.True) & V2(\F1 F2.F2(x),\e.True)))) # copula


##### Templates for Modifiers #####

## Adjectives
# - category: N|N
#   semantics: \E F x. (F(x) & E(x)) # plain semantics

- category: N|N
  semantics: \E N F x. N(\G.(E(x) & F(G)),x)

- category: N|N
  semantics: \E x F y. ((y = x) & E(y) & F(y))
  surf: Mr.

- category: N|N
  semantics: \E N F x. N(\G.F(G),x)
  surf: none

# - category: N|N
#   semantics: \E N F x. exists e.(E(e) & (Acc(e) = x) & F(x))
#   pos: VBN

## ex. bug # 33_33 (fracas-098)
- category: N/N
  semantics: \E N F x.(E(x) & _num(N,x) & F(N))
  surf: "#"

- category: NP/N
  semantics: \E N F1 F2. exists d. (exists x.(N(\x.True,x) & F1(x) & F2(x) & _many(x,d)) & -exists y.(N(\x.True,y) & F1(y) & -F2(y) & _many(y,d)))
  surf: most

# - category: N|N
#   semantics: \E F x. exists e.(E(e) & (Subj(e) = x) & F(x)) # event semantics
#   pos: JJ

# - category: N|N
#   semantics: \E F x. exists e.(E(e) & (Subj(e) = x) & F(x)) # event semantics
#   pos: JJR

# - category: N|N
#   semantics: \E F x. exists e.(E(e) & (Subj(e) = x) & F(x)) # event semantics
#   pos: JJS

- category: (N|N)|NP
  # semantics: \E Q F x. Q(\y.True, \y.(E(x,y) & F(x)))
  semantics: \E Q N F x. Q(\y.True, \y.N(\G.(E(x,y) & F(G)),x))

- category: (NP|NP)|N
  semantics: \E N Q F1 F2. Q(\x.(N(\x.True,x) & F1(x)),F2)

- category: (NP|NP)|PP
  semantics: \E K Q F1 F2. Q(\x.exists e.(E(e,x) & K(e) & F1(x)),F2)

- category: (N|N)|PP
  semantics: \E K N F x. exists e. (N(\G.(E(e,x) & F(G)),x) & K(e))

- category: (N|N)|N
  semantics: \E N1 N2 F x.(N1(\x.True,x) & N2(\x.True,x))

- category: ((N|N)|(N|N))|(N|N)
  semantics: \E M1 M2 N F x. (M1(\F1 F2.F1(N2),\x.True,x) & M2(\F1 F2.F1(N2),\x.True,x) & N(\x.True,x))

- category: ((N|N)|(N|N))|((N|N)|(N|N))
  semantics: \E A M N1 F x. A(M,N1,\G.(E(x) & F(G)),x)

### Implicature ###

- category: ((N[adj=true]|N)|(N[adj=true]|N))|((N[adj=true]|N)|(N[adj=true]|N))
  semantics: \E D A N d1 d2 d3 H I J1 J2 c x.D((\N d1 d2 d3 H I J1 J2 c x.A(N,d1,d2,d3,H,\A1 A2 A3.(A1 <-> -A2),J1,J2,c,x)),N,d1,d2,d3,H,I,J1,J2,c,x)
  surf: dgr
  pos: EMP

###################

- category: ((S|NP)|(S|NP))|N
  semantics: \E N V Q K. Q(\x.True, \x.(E(x) & V(\F1 F2.F2(x), K) & N(\x.True,x)))


##### Templates for Preposition #####

- category: NP|NP
  semantics: \E X.X
  surf: of

## nominal modifiers
- category: (NP|NP)|NP
  semantics: \E Q1 Q2 F1 F2. Q2(\x.(Q1(\x.True, \y.exists e.(E(e,y) & (Subj(e) = x) & F1(x)))), F2)
  # semantics: \E Q1 Q2 F1 F2. Q2(\x.(Q1(\x.True, \y.exists e.(E(e) & (Subj(e) = x) & (Dat(e) = y) & F1(x)))), F2)
  # semantics: \E Q1 Q2 F1 F2. Q2(\x.(Q1(\x.True, \y.(x = y)) & F1(x)), F2)

- category: (NP|NP)|NP
  semantics: \E Q1 Q2 F1 F2. Q2(\x.(Q1(\x.True, \y.(y = x)) & F1(x)), F2)
  surf: of

# commentout for sick_trial
# - category: (NP|NP)|NP
#   semantics: \E Q1 Q2 F1 F2. Q2(\x.(Q1(\x.True, \y.(x = y)) & F1(x)), F2)
#   surf: for

# - category: (N|N[adj=true])|NP
- category: (NP|NP[adj=true])|NP
  # semantics: \E Q1 A F x.Q1(\x.True, \y.A(d1,d2,d3,\W.-W(y),I,\d.True,\d.True,c,x))
  semantics: \E Q1 Q2 F1 F2.Q1(\x.True, \y.Q2(F1,F2,V,Q,d1,d2,\W.-W(y),I,\d.True,\e.True))
  surf: than

# - category: (N|N[adj=true])|NP
- category: (NP|NP[adj=true])|NP
  # semantics: \E Q1 A F x.Q1(\x.True, \y.A(d1,d2,d3,\W.-W(y),I,\d.True,\d.True,c,x))
  semantics: \E Q1 Q2 F1 F2.Q1(\x.True, \y.Q2(F1,F2,V,Q,d1,d2,\W.-W(y),I,\d.True,\e.True))
  surf: as

# - category: (N|N[adj=true])|NP[deg=true]
- category: (NP|NP[adj=true])|NP[deg=true]
  # semantics: \E Q1 A F x.A(d1,d2,d3,\w.True,I,Q1,\w.True,c,x)
  semantics: \E Q1 Q2 F1 F2.Q2(F1,F2,V,Q,d1,d2,\w.True,I,Q1,\e.True)
  surf: than

- category: ((NP|NP)|(NP|NP))|NP
  semantics: \E Q1 M Q2 F1 F2. Q2(\y.True,\y.Q1(\x.((x = y) & M(\G1 G2.G1(x),\w.True,\w.True) & F1(x)), F2))
  surf: of

- category: PP|NP
  semantics: \E Q e. Q(\x.True, \x.E(e,x))

- category: PP|PP
  semantics: \E K e1. exists e2. (K(e2) & E(e2,e1))

- category: (PP|PP)|NP
  semantics: \E Q K e. Q(\x.True, \x.(E(e,x) & K(e)))

- category: PP|S
  semantics: \E S e. (E(e) & S(\e.True))

- category: PP|(S|NP)
  semantics: \E V e1. exists x. V(\F1 F2.F2(x),\e2.((Subj(e2) = x) & E(e1,x)))

# - category: PP|(S[adj=true]|NP)
#   semantics: \E A e1. exists x. A(d1,d2,d3,H,I,J1,J2,\F1 F2.F2(x),\e2.((Subj(e2) = x) & E(e1,x)))

- category: (PP|(S|NP))|NP
  semantics: \E Q V e1. (Q(\x.True,\x.E(e1,x)) & exists x. V(\F1 F2.F2(x),\e2.((Subj(e2) = x) & (e2 = e1))))

- category: (NP|NP)|S
  semantics: \E S Q F1 F2. (Q(F1,F2) & S(\e.True))

- category: ((S|NP)|(S|NP))|PP
  semantics: \E K1 V Q K2. Q(\x.True, \x.(V(\F1 F2.F2(x), \e.(E(e) & K1(e) & K2(e)))))

- category: ((S|NP)|(S|NP))|NP
  # semantics: \E Q1 V Q2 K. V(Q2, \e.Q1(\x.True, \x.(E(e,x) & K(e))))
  semantics: \E Q1 V Q2 K. V(Q2, \e.Q1(\x.True, \x.(E(e,x) & (Subj(e) = x) & K(e))))
  # plain semantics
  # semantics: \E Q1 V Q2 K. Q2(\x.True, \x.Q1(\y.True, \y.(V(\F1 F2.F2(x), \w.True) & E(x,y))))

- category: ((S[adj=true]|NP)|(S[adj=true]|NP))|NP
  semantics: \E Q1 A Q2 d1 d2 d3 H I J1 J2 K. A(Q2,d1,d2,d3,H,I,\d.True,\d.True,K)

- category: ((S[adj=true]|NP)|(S[adj=true]|NP))|NP
  semantics: \E Q1 A Q2 d1 d2 d3 H I J1 J2 K.Q1(\x.True, \y.A(Q2,d1,d2,d3,\H1 d.-H1(y,d),I,\d.True,\d.True,K))
  # semantics: \E Q1 A Q2 d1 d2 d3 H I J1 J2 K.A(Q2,d1,d2,d3,\H1 d.-Q1(\x.True,\x.H1(x,d)),I,\d.True,\d.True,K)
  surf: than

- category: ((S[adj=true]|NP)|(S[adj=true]|NP))|NP
  semantics: \E Q1 A Q2 d1 d2 d3 H I J1 J2 K. Q1(\x.True, \y.A(Q2,d1,d2,d3,\H1 d.-H1(y,d),I,\d.True,\d.True,K))
  surf: as

# differential "than", "as"
- category: ((S[adj=true]|NP)|(S[adj=true]|NP))|NP[deg=true]
  semantics: \E Q1 A Q2 d1 d2 d3 H I J1 J2 K. A(Q2,d1,d2,d3,\H1 d.True,I,Q1,\d.True,K)
  surf: than

- category: ((S[adj=true]|NP)|(S[adj=true]|NP))|NP[deg=true]
  semantics: \E Q1 A Q2 d1 d2 d3 H I J1 J2 K. A(Q2,d1,d2,d3,\H1 d4.-Q1(\d5.(d4 = d5)),I,\d.True,\d.True,K)
  surf: as

# deletion "than", "as"
- category: ((S[adj=true]|NP)|(S[adj=true]|NP))|(S|(S|NP))
  semantics: \E Q1 A Q2 d1 d2 d3 H I J1 J2 K. Q1(\X.X, \w.True, \y.A(Q2,d1,d2,d3,\H1 d.-H1(y,d),I,\d.True,\d.True,K))
  surf: than

- category: ((S[adj=true]|NP)|(S[adj=true]|NP))|(S|(S|NP))
  semantics: \E Q1 A Q2 d1 d2 d3 H I J1 J2 K. Q1(\X.X, \w.True, \y.A(Q2,d1,d2,d3,\H1 d.-H1(y,d),I,\d.True,\d.True,K))
  surf: as

# ex. John won more orders than Bob.
- category: (((S|NP)|((S|NP)|NP))|NP[adj=true])|NP
  semantics: \E Q1 A V Q2 K. A(F1,F2,\W1 W2 W3.V(W1,\F1 F2.W2(F1,F2,F2),W3),\A1 A2.Q2(A1,\z1.Q1(\x.True,\x.A2(x,z1))),d1,d2,H,I,J,K)
  surf: than

# ex. John won as many orders as Bob.
- category: (((S|NP)|((S|NP)|NP))|NP[adj=true])|NP
  semantics: \E Q1 A V Q2 K. A(F1,F2,\W1 W2 W3.V(W1,\F1 F2.W2(F1,F2,F2),W3),\A1 A2.Q2(A1,\z1.Q1(\x.True,\x.A2(x,z1))),d1,d2,H,I,J,K)
  surf: as

- category: (((S|NP)|(S|NP))|NP)|NP
  semantics: \E Q1 Q2 V Q3 K. V(Q3, \e.Q2(\x.True, \x.Q1(\y.True, \y.(E(e,y) & (Acc(e) = x) & K(e)))))

# ex. John won more orders than Bob did.
- category: (((S|NP)|((S|NP)|NP))|NP[adj=true])|S
  semantics: \E Q1 A V Q2 K. A(F1,F2,\W1 W2 W3.V(W1,\F1 F2.W2(F1,F2,F2),W3),\A1 A2.Q2(A1,\z1.Q1(\x.True,\x.A2(x,z1))),d1,d2,H,I,J,K)
  surf: than

# ex. John won as many orders as Bob did.
- category: (((S|NP)|((S|NP)|NP))|NP[adj=true])|S
  semantics: \E Q1 A V Q2 K. A(F1,F2,\W1 W2 W3.V(W1,\F1 F2.W2(F1,F2,F2),W3),\A1 A2.Q2(A1,\z1.Q1(\x.True,\x.A2(x,z1))),d1,d2,H,I,J,K)
  surf: as

- category: (((S|NP)|(S|NP))|NP)|S
  semantics: \E S Q1 V Q2 K. V(Q2, \e1.Q1(\x.True, \x.S(\e2.(E(e2,e1) & (Acc(e2) = x) & K(e1)))))

# plain semantics
# - category: ((S[adj=true]|NP)|(S[adj=true]|NP))|NP
#   semantics: \E Q1 V Q2 K. Q2(\x.True, \x.Q1(\y.True, \y.(V(\F1 F2.F2(x), \w.True) & E(x,y))))

- category: (((S|NP)|(S|NP))|(S|NP))|NP
  semantics: \E Q1 V1 V2 Q2 K. Q2(\x.True,\x.(Q1(\y.True,\y.(y = x)) & V1(\F1 F2.F2(x),\e.True) & V2(\F1 F2.F2(x),K)))
  # semantics: \E Q1 V1 V2 Q2 K. Q2(\x.True, \x.V1(\F1 F2.(V2(\G1 G2.G2(x), \e.True) & F2(x)), K))
  # semantics: \E Q1 V1 V2 Q2 K. Q2(\x.True, \x.Q1(\y.True, \y.exists e.((Subj(e) = x) & (Acc(e) = y) & V1(\F1 F2.F2(y),\w.True) & V2(\F1 F2.F2(y),\w.True) & K(e))))

- category: (((S|NP)|(S|NP))|(S|NP))|N
  semantics: \E N V1 V2 Q K. Q(\x.True,\x.(N(\x.True,x) & V1(\F1 F2.F2(x),\e.True) & V2(\F1 F2.F2(x),K)))

- category: (PP|PP)|(PP|PP)
  semantics: \E X. X

- category: ((N|N)|(N|N))|(S|NP)
  # semantics: \E V M F x. (V(\G1 G2. G2(x), \e.True) & M(F,x))
  semantics: \E V M N F x. (V(\G1 G2. G2(x), \e.True) & M(\A1 A2.N(\G.A1(G),x),F,x))

- category: ((N|N)|(N|N))|NP
  # semantics: \E Q A F x. Q(\x.True, \x. (E(x) & A(F,x)))
  semantics: \E Q A N F x. Q(\x.True, \x. (E(x) & A(\A1 A2.N(\G.A1(G),x),F,x)))

- category: (((S|NP)|(S|NP))|((S|NP)|(S|NP)))|NP 
  semantics: \E Q1 M V Q2 K. M(V,Q2,\e.(Q1(\x.True,\x.(E(e,x) & K(e)))))

- category: (((S|NP)|(S|NP))|((S[adv=true]|NP)|(S[adv=true]|NP)))|NP 
  semantics: \E Q1 A V Q2 K. Q2(\x.True,\x.V(\F1 F2.F2(x),\e1.V(\F1 F2.Q1(\x.True,F2),\e2.A(\A1 A2.A2(e1),Q2,d1,d2,d3,\H1 d.H1(e2,d),\A1 A2.A2(-A1),\d.True,\d.True,K))))
  surf: than

- category: (((S|NP)|(S|NP))|((S[adv=true]|NP)|(S[adv=true]|NP)))|NP 
  semantics: \E Q1 A V Q2 K. Q2(\x.True,\x.V(\F1 F2.F2(x),\e1.V(\F1 F2.Q1(\x.True,F2),\e2.A(\A1 A2.A2(e1),Q2,d1,d2,d3,\H1 d.H1(e2,d),\A1 A2.A2(A1),\d.True,\d.True,K))))
  surf: as

# differential "than", "as"
- category: (((S|NP)|(S|NP))|((S[adv=true]|NP)|(S[adv=true]|NP)))|NP[deg=true]
  semantics: \E Q1 A V Q2 K. A(V,Q2,d1,d2,d3,\H1 d.True,\A1 A2.A2(A1),Q1,\d.True,K)
  surf: than

- category: (((S|NP)|(S|NP))|((S|NP)|(S|NP)))|S
  semantics: \E S X. X

- category: (((S|NP)|(S|NP))|((S[adv=true]|NP)|(S[adv=true]|NP)))|S
  semantics: \E Q1 A V Q2 K. Q2(\x.True,\x.V(\F1 F2.F2(x),\e1.V(\F1 F2.Q1(\x.True,F2),\e2.A(\A1 A2.A2(e1),Q2,d1,d2,d3,\H1 d.H1(e2,d),\A1 A2.A2(-A1),\d.True,\d.True,K))))
  surf: than

- category: (((S|NP)|(S|NP))|((S[adv=true]|NP)|(S[adv=true]|NP)))|S
  semantics: \E Q1 A V Q2 K. Q2(\x.True,\x.V(\F1 F2.F2(x),\e1.V(\F1 F2.Q1(\x.True,F2),\e2.A(\A1 A2.A2(e1),Q2,d1,d2,d3,\H1 d.H1(e2,d),\A1 A2.A2(A1),\d.True,\d.True,K))))
  surf: as

- category: ((NP|NP)|(NP|NP))|((NP|NP)|(NP|NP))
  semantics: \E X. X


### DEFAULT TEST ###
- category: ((NP|NP)|NP)|NP
  semantics: \E Q1 Q2 Q3 F1 F2. Q3(\x.(Q2(\y.True,\y.((y = x) & Q1(\z.True,\z.(E(y,z))))) & F1(x)),F2)

- category: (S|S)|N
  semantics: \E F S K. S(\e.(E(e) & F(\x.True,e) & K(e)))

- category: (S|S)|PP
  semantics: \E F S K. S(\e.(E(e) & F(e) & K(e)))


##### Templates for Verb phrases #####

## intransitive verbs
- category: S|NP
  semantics: \E Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & K(e)))

- category: S|NP
  semantics: \E X. X
  base: do

## transitive verbs
- category: (S|NP)|NP
  semantics: \E Q1 Q2 K. Q2(\x.True, \x.Q1(\y.True, \y.exists e.(E(e) & (Subj(e) = x) & (Acc(e) = y) & K(e))))

- category: (S|NP)|NP
  semantics: \E Q1 Q2 K. Q2(\x.True, \x.Q1(\y.True, \y.exists e.(E(e) & (Acc(e) = y) & K(e))))
  pos: JJ
  entity: PRE

## perceptual verbs
- category: ((S\NP)/(S\NP))/NP
# - category: ((S|NP)|(S|NP))|NP
  semantics: \E Q1 V Q2 K. Q2(\x.True, \x.exists e1.(E(e1) & (Subj(e1) = x) & V(Q1,\e2.(AccE(e1) = e2)) & K(e1)))

- category: ((S\NP)/(S[adj=true]\NP))/NP
# - category: ((S|NP)|(S|NP))|NP
  semantics: \E Q1 A Q2 K. Q2(\x.True, \x.exists e1.(E(e1) & (Subj(e1) = x) & A(Q1,d1,d2,d3,H,I,J1,J2,\e2.(AccE(e1) = e2)) & K(e1)))

- category: ((S|NP)|PP)|NP
  semantics: \E Q1 K1 Q2 K2. Q2(\x.True, \x.Q1(\y.True, \y.exists e.(E(e) & (Subj(e) = x) & (Acc(e) = y) & K1(e) & K2(e))))

- category: (S[pss=true]|NP)|(PP|NP)
  semantics: \E M Q K. Q(\x.True, \x.exists e.(E(e) & M(\F1 F2.F2(x),e) & K(e)))

- category: ((S|NP)|PP)|(S[adj=true]|NP)
  # semantics: \E V K1 Q K2. Q(\x.True,\x.exists e.(E(e) & (Subj(e) = x) & V(\F1 F2.F2(x),\e.True) & K1(e))) # plain semantics
  semantics: \E A K1 Q K2. Q(\x.True,\x.exists e.(E(e) & (Subj(e) = x) & A(\G1 G2.G2,d1,d2,_th(_u),H,\A1 A2 A3.(A1(x) & -A2),J1,J2,K) & K1(e))) # plain semantics

## control verbs
- category: (S|NP)|(S[to=true]|NP)
  # semantics: \E V Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & AccI(e, V(\F1 F2.F2(x),\e.True)) & K(e)))
  semantics: \E V Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & V(\F1 F2.F2(x),\e.True) & K(e)))

- category: ((S|NP)|(S[to=true]|NP))|NP
  semantics: \E Q1 V Q2 K. Q2(\x.True, \x.exists e1.(E(e1) & (Subj(e1) = x) & V(Q1,\e2.True) & K(e1)))

- category: ((S|NP)|(S[ng=true]|NP))|NP
  semantics: \E Q1 V Q2 K. Q2(\x.True, \x.exists e1.(E(e1) & (Subj(e1) = x) & V(Q1,\e2.(AccE(e1) = e2)) & K(e1)))

## ditransitive verbs
- category: ((S|NP)|NP)|NP
  semantics: \E Q1 Q2 Q3 K. Q3(\x1.True, \x1.Q2(\x2.True, \x2.Q1(\x3.True, \x3.exists e.(E(e) & (Subj(e) = x1) & (Acc(e) = x3) & (Dat(e) = x2) & K(e)))))

- category: (S|NP)|PP
  semantics: \E F Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & F(e) & K(e)))

- category: (S[adj=true]|NP)|PP
  semantics: \E F Q d1 d2 d3 H I J1 J2 K. Q(\x.True,(I(\x.E(x,d1),-(d1 = d3),(H(\y.E(y,d2)) & J1(\d4.$less(d1,d4)))) & F(e)))

- category: ((S|NP)|NP)|PP
  semantics: \E K1 Q1 Q2 K1. Q2(\x.True, \x.Q1(\y.True, \y.exists e.(E(e) & (Subj(e) = x) & (Acc(e) = y) & K1(e) & K2(e))))

- category: ((S|NP)|PP)|PP
  semantics: \E F1 F2 Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & F1(e) & F2(e) & K(e)))

## attitude verbs
- category: (S|NP)|S
  # semantics: \E S Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & S(\w.True) & K(e)))
  semantics: \E S Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & AccI(e,S(\w.True)) & K(e)))

- category: ((S|NP)|NP)|(S|NP)
  semantics: \E V Q1 Q2 K. Q2(\x.True, \x.Q1(\y.True, \y.exists e.(E(e) & (Subj(e) = x) & AccI(e,V(\F1 F2.F2(y),\w.True)) & K(e))))

- category: ((S|NP)|S)|NP
  semantics: \E Q1 S Q2 K. Q1(\y.True, \y.Q2(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & AccI(e,S(\w.True)) & (Dat(e) = y) & K(e))))

- category: ((S|NP)|S)|PP
  semantics: \E F S Q K. Q(\x.True, \x.exists e. (E(e) & F(e) & (Subj(e) = x) & AccI(e,S(\w.True)) & K(e)))

- category: ((S|NP)|S)|(S|NP)
  semantics: \E V S Q K. Q(\x.True, \x.exists e. (E(e) & V(\F1 F2.F2(x),\w.True) & (Subj(e) = x) & AccI(e,S(\w.True)) & K(e)))

- category: ((S|S)|NP)|NP
  semantics: \E Q1 Q2 S K. Q2(\x.True, \x.Q1(\y.True, \y.exists e. (E(e) & (Subj(e) = x) & AccI(e,S(\w.True)) & (Dat(e) = y) & K(e))))

### DEFAULT TEST ###
- category: (((S|NP)|S)|(S|NP))|NP
  semantics: \E Q1 V S Q2 K. Q2(\x.True, \x.exists e. (E(e) & (Subj(e) = x) & AccI(e,S(\w.True)) & K(e)))

- category: (S|NP)|S[qem=true]
  semantics: \E S Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & AccI(e,S(\w.True)) & K(e)))


##### Templates for relative clauses #####

- category: (NP|NP)|(S|NP)
  semantics: \E V Q F1 F2. Q(\x.(V(\G1 G2.G2(x), \e.True) & F1(x)), F2)

# - category: (NP|NP[adj=true])|(S|NP)
#   # semantics: \E Q1 A F2 F3.A(\V1 V2 V3.V2(W1,\U1 U2.(F2(U2) & F3(U2)),\U1 U2.Q1(\W1 W2.W2(U2),\e.True)),\W1 W2.W2(x,z2),d,d,I,K)
#   semantics: \E Q1 A F2 F3.A(F2,F3,\V1 V2 V3.V2(W1,\U1 U2.(F2(U2) & F3(U2)),\U1 U2.Q1(\W1 W2.W2(U2),\e.True)),\W1 W2.W2(x,z2),d,d,H,I,J,K)
#   surf: than

# - category: (NP|NP[adj=true])|(S|NP)
#   semantics: \E Q1 A F1 F2.exists y.(A(F2,F3,V,Q,d1,d2,\W.-W(y),I,\x.True,\e.True) & Q1(\F1 F2.F2(y),\e.True))
#   surf: than

# ex. John has more orders than Bob lost.
# ex. APCOM has a more important customer than ITEL is.
- category: (NP|NP[adj=true])|(S|NP)
  semantics: \E Q1 A F1 F2.exists y.A(F1,F2,\W1 W2 W3.W2(W1,\x1 x2.(F1(x2) & F2(x2)),\x1 x2.Q1(\W1 W2.W2(x2),\e.True)),\W1 W2.W2(x,z2),d1,d2,\W.-W(y),I,\x.Q1(\F1 F2.F2(y),\e.True),\e.True)
  surf: than

- category: NP|(S|NP)
  semantics: \E V F1 F2. exists x. (V(\F1 F2.F2(x),\e.True) & F1(x) & F2(x))

- category: (NP|(S|NP))|N
  semantics: \E N V F1 F2. exists x. (N(\x.True,x) & V(\G1 G2.G2(x),\e.True) & F1(x) & F2(x))

- category: (S[qem=true]|(S|NP))|N
  semantics: \E N V K. exists x. (N(\x.True,x) & V(\F1 F2.F2(x),K))

- category: NP|((S|NP)|NP) 
  semantics: \E V F1 F2. exists x y. (V(\F1 F2.F2(y),\G1 G2.G2(x),\e.True) & F1(x) & F2(x))

- category: (NP|NP)|(NP|NP) 
  semantics: \E M Q F1 F2. Q(\y. exists x.(M(\G1 G2.G1(x),\w.True,\w.True) & Rel(x,y) & F1(y)),F2)
  base: whose

- category: ((NP|NP)|(S|NP))|N
  semantics: \E N V Q F1 F2. Q(\y.exists x.(N(\x.True,x) & Rel(x,y) & V(\F1 F2.F2(x),\e.True) & F1(x)),F2)
  base: whose

- category: ((NP|NP)|(NP|NP))|S
  semantics: \E S M Q F1 F2. Q(\x.(S(\e.(Dat(e) = x)) & M(\G1 G2.G1(x),\w.True,\w.True) & F1(x)), F2)

- category: ((NP|NP)|(NP|NP))|(S|NP)
  semantics: \E V M Q F1 F2. Q(\x.(V(\G1 G2.G2(x),\e.True) & M(\G1 G2.G1(x),\w.True,\w.True) & F1(x)), F2)

- category: ((NP|NP)|(S|NP))|(NP|NP)
  semantics: \E M V Q F1 F2. M(Q, \x.(F1(x) & F2(x)), \x.V(\G1 G2.G2(x), \e.True))

- category: ((NP|NP)|S)|((NP|NP)|NP)
  semantics: \E M S Q F1 F2. Q(\x.(S(\e.(Dat(e) = x)) & F1(x)),F2)


##### Templates for questions #####

- category: S|(S|NP)
  semantics: \E V K. exists x. V(\G1 G2. G2(x), \e.True)

- category: (S|(S|NP))|N
  semantics: \E N V K. exists x. (N(\x.True,x) & V(\G1 G2. G2(x), \e.True))


##### Templates for connectives #####

## default conjunctive interpretation
- category: (S|S)|S
  semantics: \E S1 S2 K. (S2(\e.True) & S1(\e.True))

- category: ((S|NP)|(S|NP))|S
  semantics: \E S V Q K. (V(Q,\e.True) & S(\e.True))

########## Templates with syntactic features ##########

##### Templates for Copula #####

- category: ((S|NP)|S)|(S|NP)
  semantics: \E V S Q K. Q(\x.True,\x.exists e.(V(\F1 F2.F2(x),\w.True) & (Subj(e) = x) & AccI(e,S(\w.True)) & K(e)))
  base: be

- category: ((S|NP[expl=true])|S[em=true])|(S[adj=true]|NP)
  # semantics: \E V S Q K. V(\F1 F2.F2(S(K)),\e.True)
  semantics: \E A S Q K. A(\F1 F2.Q(F1,\x.F2(S(K))),d1,d2,d3,H,I,J1,J2,K)

##### Templates for Adjectives #####

# - category: S[adj=true]|NP
#   semantics: \E Q K. Q(\x.True, \x.E(x)) # plain semantics
#   # semantics: \E Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & K(e))) # event semantics

- category: (S[adj=true]|NP)|NP
  # semantics: \E Q1 Q2 K. Q2(\x.True, \x.Q1(\y.True, \y.E(x,y))) # plain semantics
  semantics: \E Q1 Q2 d1 d2 d3 H I J1 J2 K. Q2(\x.True, \x.Q1(\y.True, \y.E(x,y))) # plain semantics
  # semantics: \E Q1 Q2 K. Q2(\x.True, \x.Q1(\y.True, \y.exists e.(E(e) & (Subj(e) = x) & (Acc(e) = y) & K(e)))) # event semantics

- category: (S[adj=true]|NP)|(S[to=true]|NP)
  # semantics: \E T d1 d2 d3 H I J1 J2 Q.exists d1.T(\F1 F2.Q(F1,\x.(E(x,d1) & F2(x))))
  semantics: \E V Q d1 d2 d3 H I J1 J2 K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & AccI(e, V(\F1 F2.F2(x),\e.True))))

## tough constructions
- category: (S[adj=true]|NP)|((S[to=true]|NP)|NP)
  # semantics: \E V2 Q K. Q(\x.True, \x.(exists y. V2(\F1 F2.F2(x),\F1 F2.F2(y),\e.(E(e) & K(e)))))
  semantics: \E V2 Q d1 d2 d3 H I J1 J2 K. Q(\x.True, I(\x.(E(x,d1) & exists y. V2(\F1 F2.F2(x),\F1 F2.F2(y),\e.K(e))),-(d1 = d3),(H(\y.E(y,d2)) & J1(\d4.$less(d1,d4)))))
  
- category: N|S
  semantics: \E S F x. (E(x) & F(E) & S(\e.True))


##### passives #####

- category: S[pss=true]|NP
  semantics: \E Q K. Q(\x.True, \x.exists e.(E(e) & (Acc(e) = x) & K(e)))

- category: (S[pss=true]|NP)|NP
  semantics: \E Q1 Q2 K. Q2(\x.True, \x.Q1(\y.True, \y.exists e.(E(e) & (Dat(e) = x) & (Acc(e) = y) & K(e))))

- category: (S[pss=true]|NP)|PP
  semantics: \E F Q K. Q(\x.True, \x.exists e.(E(e) & (Acc(e) = x) & F(e) & K(e)))

- category: (S[pss=true]|NP)|(S[adj=true]|NP)
  semantics: \E A Q K. Q(\x.True, \x.(A(\F1 F2.F2(x),d1,d2,d3,H,I,J1,J2,\e.True) & exists e.(E(e) & (Acc(e) = x) & K(e))))

##### Templates for semantically empty expressions #####

- category: NP[thr=true]
  semantics: \E F1 F2. F2(E)

- category: (S[to=true]|NP)|(S[b=true]|NP)
  semantics: \E X. X

- category: S[asup=true]|NP
  semantics: \E Q K. Q(\x.True,\x.True)

- category: (S|S)|(S[asup=true]|NP)
  semantics: \E X Y. Y

- category: N|N
  semantics: \E N F x. N(\x.True,x)
  pos: LQU

- category: N|N
  semantics: \E N F x. N(\x.True,x)
  pos: RQU

- category: N
  semantics: \E F x. True
  pos: RQU

- category: (NP|N)|NP
  semantics: \E Q N F1 F2. Q(\x.(N(\x.True,x) & F1(x)),F2)
  # pos: RQU


##### Templates for complementizers #####

- category: S[em=true]|S
  semantics: \E S K. S(K)


##### Templates for auxiliary expressions #####

- category: (S|NP)|(S[b=true]|NP)
  # semantics: \E V Q K. Q(\x.True, \x.V(\F1 F2.E(F2(x)),K)) # modal sentential operator
  semantics: \E V Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & V(\F1 F2.F2(x),\e.True) & K(e)))
  # semantics: \E V Q K. V(Q, \e.(E(e) & K(e))) # flat semantics

- category: (S|(S|NP))|NP
  semantics: \E Q V K. Q(\x.True, \x.V(\F1 F2.E(F2(x)),K)) # modal sentential operator
  # semantics: \E Q V K. Q(\x.True, \x.(E(x) & V(\F1 F2.F2(x),K))) # flat semantics1
  # semantics: \E Q V K. Q(\x.True, \x.V(\F1 F2.F2(x),K)) # flat semantics2


############### Semantic templates for rebanked parsers #################

- category: PR
  semantics: \E. E

- category: N|PP
  semantics: \E K F x. (E(x) & F(E) & exists e.((Subj(e) = x) & K(e)))

- category: NP|PP
  semantics: \E K F1 F2. exists x. (E(x) & exists e.((Subj(e) = x) & K(e)) & F1(x) & F2(x))

- category: N|(S|NP)
  semantics: \E V F x. (E(x) & F(E) & V(\F1 F2.F2(x),\w.True))

- category: (N|PP)|PP
  semantics: \E K1 K2 F x. (E(x) & F(E) & exists e. ((Subj(e) = x) & K1(e) & K2(e)))

- category: NP|(N|PP)
  semantics: \E M F1 F2. exists x.(exists y.(E(y) & Rel(x,y)) & M(\w.True,\x.True,x) & F1(x) & F2(x))

- category: (S|NP)|PR
  semantics: \E R Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & R(e) & K(e)))

- category: ((S|NP)|NP)|PR
  semantics: \E R Q1 Q2 K. Q2(\x.True, \x.Q1(\y.True, \y.exists e.(E(e) & (Subj(e) = x) & (Acc(e) = y) & R(e) & K(e))))

- category: ((S|NP)|(S|NP))|PR
  semantics: \E R V Q K. V(Q,K)

- category: (N|PP)|(S|NP) 
  semantics: \E V K F x. (E(x) & F(E) & exists y. (Rel(x,y) & V(\G1 G2.G2(y),\w.True) & exists e.((Subj(e) = x) & K(e))))

- category: (N|N)|(S|NP)
  semantics: \E V N F x. N(\G3.(V(\G1 G2.G2(x),\w.True) & F(G3)),x)

# - category: (N|N[adj=true])|(S|NP)
#   semantics: \E Q1 A F x.exists y.(A(d1,d2,d3,\W.-W(y),I,\x.True,\x.True,c,x) & Q1(\F1 F2.F2(y),\e.True))
#   surf: than

- category: (N|N)|S
  semantics: \E S N F x. N(\G.(S(\w.True) & F(G)),x)

- category: ((N|PP)|(N|PP))|(S|NP)
  semantics: \E V M K F x. (V(\F1 F2.F2(x),\w.True) & M(\w.True,\x.True,x) & exists e. ((Subj(e) = x) & K(e)))


############### Lexical entries #################

##### Lexical entries for NPs #####

- category: NP
  # semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  semantics: \E F1 F2. forall x. (_people(x) -> (F1(x) -> F2(x)))
  surf: everyone

- category: NP
  # semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  semantics: \E F1 F2. forall x. (_people(x) -> (F1(x) -> F2(x)))
  surf: everybody

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  surf: everything

- category: NP
  semantics: \E F1 F2. exists x. (F1(x) & F2(x))
  base: anyone

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  base: anybody

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  base: anything

- category: NP
  semantics: \E F1 F2. -exists x. (F1(x) & F2(x))
  surf: nobody

- category: NP
  semantics: \E F1 F2. -exists x. (F1(x) & F2(x))
  surf: nothing

- category: NP
  semantics: \E F1 F2. exists x. (F1(x) & F2(x))
  surf: someone

- category: NP
  semantics: \E F1 F2. exists x. (F1(x) & F2(x))
  surf: somebody

- category: NP
  semantics: \E F1 F2. exists x. (F1(x) & F2(x))
  surf: something

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  surf: all

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  surf: each

- category: NP
  semantics: \E F1 F2. exists x. (F1(x) & F2(x))
  surf: both

- category: NP
  semantics: \E F1 F2. (exists x. F1(x) & forall x. (F1(x) -> - F2(x)))
  surf: neither

# - category: N
#   semantics: \E F x. True
#   pos: NN
#   base: one

- category: N
  semantics: \E F x. True
  base: group

# - category: N
#   semantics: \E F x. True
#   base: people

# - category: N
#   semantics: \E F x. True
#   base: person

- category: N|N
  semantics: \E F. F
  base: one

- category: N|N
  semantics: \E F. F
  base: other

- category: N|N
  semantics: \E F. F
  base: few


##### Lexical entries for determiners #####

- category: NP|N
  semantics: \E N F1 F2. forall x. (N(\x.True,x) -> (F1(x) -> F2(x)))
  surf: every

- category: NP|N
  semantics: \E N F1 F2. forall x. (N(\x.True,x) -> (F1(x) -> F2(x)))
  surf: all

- category: NP|N
  semantics: \E N F1 F2. forall x. (N(\x.True,x) -> (F1(x) -> F2(x)))
  surf: each

- category: NP|N
  semantics: \E N F1 F2. forall x. (N(\x.True,x) -> (F1(x) -> F2(x)))
  surf: any

- category: NP[npi=true]|N
  semantics: \E N F1 F2. exists x. (N(\x.True,x) & F1(x) & F2(x))
  surf: any

- category: NP|N
  semantics: \E N F1 F2. exists x. (N(\x.True,x) & F1(x) & F2(x))
  surf: some

- category: NP|N
  semantics: \E N F1 F2. exists x. (N(\x.True,x) & F1(x) & F2(x))
  surf: a

- category: NP|N
  semantics: \E N F1 F2. exists x. (N(\x.True,x) & F1(x) & F2(x))
  surf: an

- category: NP|N
  semantics: \E N F1 F2. exists x. (N(\x.True,x) & F1(x) & F2(x))
  # semantics: \E N F1 F2. exists x. (N(\x.True,x) & forall y. (N(\w.True,y) -> (y = x)) & F1(x) & F2(x))
  surf: the

- category: NP|N
  semantics: \E N F1 F2. exists x. (N(\x.True,x) & F1(x) & F2(x))
  surf: both

- category: NP|N
  semantics: \E N F1 F2. -exists x. (N(\x.True,x) & F1(x) & F2(x))
  surf: neither

- category: NP|N
  semantics: \E N F1 F2. -exists x. (N(\x.True,x) & F1(x) & F2(x))
  surf: "no"

- category: NP[nb=true]|N
  # semantics: \E N F1 F2. exists x. (exists d1.N(\G.(_many(x,d1) & $less(d1,_th(G))),x) & F1(x) & F2(x))
  semantics: \E N F1 F2. exists x. (exists d1.N(\G.(_many(x,d1) & $less(d1,_th(G))),x) & F1(x) & F2(x))
  surf: a~few

- category: NP[adj=true]|N[adj=true]
  semantics: \E A F1 F2 V Q d1 d2 H I J K. exists x. A(d1,d2,d3,H,I,\W.(J(W) & F1(x) & F2(x)),J2,c,x)
  surf: a

- category: NP[adj=true]|N[adj=true]
  semantics: \E A F1 F2 V Q d1 d2 H I J K. exists x. A(d1,d2,d3,H,I,\W.(J(W) & F1(x) & F2(x)),J2,c,x)
  surf: an

- category: NP[adj=true]|N[adj=true]
  semantics: \E A F1 F2 V Q d1 d2 H I J K. exists x. A(d1,d2,d3,H,I,\W.(J(W) & F1(x) & F2(x)),J2,c,x)
  surf: the

### Implicature ###

# ex. There are pos a few books.
- category: (NP|N)|(NP|N)
  semantics: \E Q G1 G2 G3. (Q(G1,G2,G3) & all x d1.exists d2.(G1(\G4.(_many(x,d1) & (d2 = _th(G4))),x) & G2(x) & G3(x) -> $less(d1,d2)))
  surf: pos

# # ex. There are pos pos few books.
# - category: ((N[down=true]|N)|(N[adj=true]|N))|((N[down=true]|N)|(N[adj=true]|N))
#   semantics: \E Q A N F x. (Q(A,N,F,x) | -exists x.N(\x.True,x))
#   surf: pos

###################

# - category: (NP/N)/(N/N)
#   semantics: \E d N F1 F2.-exists x.(N(\x.True,x) & _many(x,$sum(d,1)) & F1(x) & F2(x))
#   surf: at~most

- category: NP|NP
  semantics: \E Q F1 F2. forall x. (Q(\y.True, \y.((y = x) & F1(y))) -> F2(x))
  surf: all

- category: NP|NP
  semantics: \E Q F1 F2. forall x. (Q(\y.True, \y.((y = x) & F1(y))) -> F2(x))
  surf: all

- category: NP|NP
  semantics: \E Q. Q
  surf: such

- category: NP|NP
  semantics: \E Q F1 F2. forall x. (Q(\y.True, \y.((y = x) & F2(y))) -> F1(x))
  surf: only


##### Floating quantifiers #####

- category: (S|NP)|(S|NP)
  semantics: \E V Q K. forall x. (Q(\y.True, \y.(y = x)) -> V(\F1 F2.F2(x), K))
  surf: all

- category: (S|NP)|(S|NP)
  semantics: \E V Q K. forall x. (Q(\y.True, \y.(y = x)) -> V(\F1 F2.F2(x), K))
  surf: all

- category: (S|NP)|(S|NP)
  semantics: \E V Q K. forall x. (Q(\y.True, \y.(y = x)) -> V(\F1 F2.F2(x), K))
  surf: each

- category: (S|NP)|(S|NP)
  semantics: \E V Q K. forall x. (Q(\y.True, \y.(y = x)) -> V(\F1 F2.F2(x), K))
  surf: each


##### Adverb #####

- category: (S|NP)|(S|NP)
  semantics: \E V1. V1
  surf: also

- category: (S|NP)|(S|NP)
  semantics: \E V1. V1
  surf: together

- category: (S|NP)|(S|NP)
  semantics: \E V1. V1
  surf: ever


##### Prepositions #####

- category: ((S|NP)|(S|NP))|NP
  semantics: \E Q1 V Q2 K. V(Q2, \e.Q1(\x.True, \x.((Subj(e) = x) & K(e))))  # subject wide scope
  # semantics: \E Q1 V Q2 K. Q1(\x.True, \x.V(Q2,\e.((Subj(e) = x) & K(e))))  # subject narrow scope
  surf: by

- category: ((S|NP)|(S|NP))|NP
  semantics: \E Q1 V Q2 K. V(Q2, \e.-Q1(\x.True, \x.((Subj(e) = x) & K(e))))
  surf: without

- category: ((S|NP)|(S|NP))|(S[ng=true]|NP)
  semantics: \E V1 V2 Q K. Q(\x.True, \x.V1(\F1 F2.(V2(\G1 G2.G2(x),\e.True) & -F2(x)),K))
  surf: without

- category: (S[to=true]|NP)|(S[b=true]|NP)
  semantics: \E V Q K. V(Q,K)
  surf: to

- category: S|S
  semantics: \L R S K. S(\e.K(e))
  rule: fa
  child0_surf: at
  child1_surf: least

- category: NP|NP
  semantics: \L R Q F1 F2. Q(F1,F2)
  rule: fa
  child0_surf: at
  child1_surf: least

- category: (N|N)|(N|N)
  semantics: \L R S. S
  rule: fa
  child0_surf: at
  child1_surf: least

- category: S|S
  semantics: \L R S K. -S(\e.True)
  child0_surf : at
  child1_child0_surf : most

- category: (S|NP)|(S|NP)
  semantics: \L R V Q K. V(Q,\e.R(\x.True,\x.(_in_front_of(e,x) & K(e))))
  rule: fa
  child0_surf: in
  child1_child0_child0_surf: front


##### Verbs #####

## factive verbs
- category: (S|NP)|(S[to=true]|NP)
  semantics: \E V Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & AccI(e,V(\F1 F2.F2(x), \e.True)) & K(e)))
  base: manage

- category: (S|NP)|(S[to=true]|NP)
  semantics: \E V Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & AccI(e,V(\F1 F2.F2(x), \e.True)) & K(e)))
  base: fail

- category: (S|NP)|(S[to=true]|NP)
  semantics: \E V Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & AccI(e,V(\F1 F2.F2(x), \e.True)) & K(e)))
  base: try

# - category: (S|NP)|S[em=true]
#   semantics: \E S Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & AccI(e,S(\w.True)) & K(e)))
#   base: know

# - category: (S|NP)|S[em=true]
#   semantics: \E S Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & AccI(e,S(\w.True)) & K(e)))
#   base: forget

# - category: (S|NP)|S[em=true]
#   semantics: \E S Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & AccI(e,S(\w.True)) & K(e)))
#   base: manage

# - category: (S|NP)|S[em=true]
#   semantics: \E S Q K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & AccI(e,S(\w.True)) & K(e)))
#   base: fail


##### Copula #####

- category: (S|NP)|(S|NP)
  semantics: \E V Q K. V(Q, K)
  base: be

- category: (S|NP)|(S[adj=true]|NP)
  semantics: \E A Q K. Q(\x.True, \x.(A(\F1 F2.F2(x),d1,d2,d3,H,I,\d.True,\d.True,\e.True) & exists e.((Subj(e) = Subj(e)) & K(e))))
  base: be 

- category: (S|NP)|NP
  semantics: \E Q1 Q2 K. Q2(\x.True, \x.Q1(\y.True, \y.((x = y) & K(e))))
  base: be

- category: (S|NP[thr=true])|NP
  semantics: \E Q1 Q2 K. Q1(\x.True,\x.exists e.((Subj(e) = Subj(e)) & K(e)))

- category: (S|NP)|PP
  semantics: \E K1 Q K2. Q(\x.True,\x.exists e.(K1(e) & (Subj(e) = x) & K2(e)))
  base: be

- category: (S|PP)|NP
  semantics: \E Q K1 K2. Q(\x.True,\x.exists e.(K1(e) & (Subj(e) = x) & K2(e)))
  base: be


##### Negation #####

- category: S|S
  semantics: \E S. -S
  base: not

- category: NP|NP
  semantics: \E Q F1 F2. -Q(F1,F2)
  base: not

- category: (S|NP)|(S|NP) 
  # semantics: \E V Q K. -Q(\x.True, \x.V(\F1 F2.F2(x), K))
  semantics: \E V Q K. Q(\x.True, \x.-V(\F1 F2.F2(x), K))
  surf: not

- category: (S|NP)|(S|NP) 
  # semantics: \E V Q K. -Q(\x.True, \x.V(\F1 F2.F2(x), K))
  semantics: \E V Q K. Q(\x.True, \x.-V(\F1 F2.F2(x), K))
  surf: n't

- category: (S|NP)|(S[adj=true]|NP)
  # semantics: \E Q1 Q2 K.-Q2(\x.True,\x.Q1(d1,d2,d3,H,I,\w.True,\F1 F2.F2(x),\e.True))
  semantics: \E Q1 Q2 K.Q2(\x.True,\x.-Q1(\F1 F2.F2(x),d1,d2,d3,H,I,\d.True,\d.True,\e.True))
  surf: isn't

- category: (S[adj=true]|NP)|(S[adj=true]|NP) 
  # semantics: \E A d1 d2 d3 H I J1 J2 Q K. -Q(\x.True, \x.A(d1,d2,d3,H,I,J1,J2,Q,K))
  semantics: \E A Q d1 d2 d3 H I J1 J2 K. Q(\x.True, \x.-A(Q,d1,d2,d3,H,I,J1,J2,K))
  surf: not

- category: (S[adj=true]|NP)|(S[adj=true]|NP) 
  # semantics: \E A d1 d2 d3 H I J1 J2 Q K. -Q(\x.True, \x.A(d1,d2,d3,H,I,J1,J2,Q,K))
  semantics: \E A Q d1 d2 d3 H I J1 J2 K. Q(\x.True, \x.-A(Q,d1,d2,d3,H,I,J1,J2,K))
  surf: n't

- category: (S|NP)|(S|NP) 
  # semantics: \E V Q K. -Q(\x.True, \x.V(\F1 F2.F2(x), K))
  semantics: \E V Q K. Q(\x.True, \x.-V(\F1 F2.F2(x), K))
  surf: never

- category: ((S|NP)|(S|NP))|((S|NP)|(S|NP)) 
  semantics: \E M V Q K. -M(V,Q,K)
  surf: not

##### Adjectives #####

- category: S[adj=true]|NP
  semantics: \E Q d1 d2 d3 H I J1 J2 K. Q(\x.True,I(\x.many(x,d1),(H(_many,d2) & J1(\d4.$less(d4,d1))),-(d1 = d3)))
  pos: RBR

- category: S[adj=true]|NP
  semantics: \E Q d1 d2 d3 H I J1 J2 K. Q(\x.True, \x.exists e.(E(e) & (Subj(e) = x) & K(e)))
  pos: RB

# - category: S[adj=true]|NP
#   semantics: \E Q. Q(\x.True, \x.E(x))
#   surf: "true"

# - category: S[adj=true]|NP
#   semantics: \E Q. Q(\x.True, \x.E(x))
#   surf: "false"

- category: S[adj=true]|NP
  # semantics: \E Q d2 d1 d3 H I J1 J2 K. Q(\x.True,I(\x.E(x,d1),-(d1 = d3),(H(E,d2) & J1(\d4.(d1 = d4)) & J2(\d4.$less(d1,d4)))))
  semantics: \E Q d2 d1 d3 H I J1 J2 K. Q(\x.True,I(\x.E(x,d1),-(d1 = d3),(H(E,d2) & J1(\d4.(d1 = d4)) & J2(\d4.$lesseq(d1,$difference(d4,_d0))))))
  pos: JJ
  entity: NEG

- category: S[adj=true]|NP
  # semantics: \E Q d1 d2 d3 H I J1 J2 K. Q(\x.True,I(\x.E(x,d1),-(d1 = d3),(H(E,d2) & J1(\d4.$less(d4,d1)) & J2(\d4.$less(d4,d1)))))
  semantics: \E Q d1 d2 d3 H I J1 J2 K. Q(\x.True,I(\x.E(x,d1),-(d1 = d3),(H(E,d2) & J1(\d4.$less(d4,d1)) & J2(\d4.$lesseq($sum(d4,_d0),d1)))))
  pos: JJ
  entity: POS

- category: S[adj=true]|NP
  # semantics: \E Q d2 d1 d3 H I J1 J2 K. Q(\x.True,I(\x.E(x,_np(_u,d1)),-(d1 = d3),(H(E,_np(_u,d2)) & J1(\d4.(d1 = d4)) & J2(\d4.$less(d1,d4)))))
  semantics: \E Q d2 d1 d3 H I J1 J2 K. Q(\x.True,I(\x.E(x,_np(_u,d1)),-(d1 = d3),(H(E,_np(_u,d2)) & J1(\d4.(d1 = d4)) & J2(\d4.$lesseq(d1,$difference(d4,_d0))))))
  pos: JJ
  entity: NEG-INT

- category: S[adj=true]|NP
  # semantics: \E Q d1 d2 d3 H I J1 J2 K. Q(\x.True,I(\x.E(x,_np(_u,d1)),-(d1 = d3),(H(E,_np(_u,d2)) & J1(\d4.$less(d4,d1)) & J2(\d4.$less(d4,d1)))))
  semantics: \E Q d1 d2 d3 H I J1 J2 K. Q(\x.True,I(\x.E(x,_np(_u,d1)),-(d1 = d3),(H(E,_np(_u,d2)) & J1(\d4.$less(d4,d1)) & J2(\d4.$lesseq($sum(d4,_d0),d1)))))
  pos: JJ
  entity: POS-INT

- category: S[adj=true]|NP
  semantics: \E Q d1 d2 d3 H I J1 J2 K. Q(\x.True,\x.E(x))
  # pos: JJ
  entity: PRE

- category: S[adj=true]|NP
  semantics: \E Q d1 d2 d3 H I J1 J2 K. Q(\x.True,\x.E(x))
  entity: B-NORP

- category: S[adj=true]|NP
  semantics: \E Q d2 d1 d3 H I J1 J2 K. Q(\x.True,I(\x.E(x,d1),(H(E,d2) & J1(\d4.(d1 = d4))),-(d1 = d3)))
  pos: JJR
  entity: NEG

- category: S[adj=true]|NP
  semantics: \E Q d2 d1 d3 H I J1 J2 K. Q(\x.True,I(\x._much(x,d1),(H(E,d2) & J1(\d4.(d1 = d4))),-(d1 = d3)))
  pos: JJR
  surf: less

- category: S[adj=true]|NP
  semantics: \E Q d2 d1 d3 H I J1 J2 K. Q(\x.True,I(\x._many(x,d1),(H(E,d2) & J1(\d4.(d1 = d4))),-(d1 = d3)))
  pos: JJR
  surf: fewer

- category: S[adj=true]|NP
  semantics: \E Q d1 d2 d3 H I J1 J2 K. Q(\x.True,I(\x.E(x,d1),(H(E,d2) & J1(\d4.$less(d4,d1))),-(d1 = d3)))
  pos: JJR
  entity: POS

- category: S[adj=true]|NP
  semantics: \E Q d1 d2 d3 H I J1 J2 K. Q(\x.True,I(\x.many(x,d1),(H(E,d2) & J1(\d4.$less(d4,d1))),-(d1 = d3)))
  pos: JJR
  surf: more

- category: S[adj=true]|NP
  semantics: \E Q d2 d1 d3 H I J1 J2 K. Q(\x.True,I(\x.E(x,_np(_u,d1)),(H(E,_np(_u,d2)) & J1(\d4.(d1 = d4))),-(d1 = d3)))
  pos: JJR
  entity: NEG-INT

- category: S[adj=true]|NP
  semantics: \E Q d1 d2 d3 H I J1 J2 K. Q(\x.True,I(\x.E(x,_np(_u,d1)),(H(E,_np(_u,d2)) & J1(\d4.$less(d4,d1))),-(d1 = d3)))
  pos: JJR
  entity: POS-INT

- category: N[adj=true]|N
  # semantics: \E N d2 d1 d3 H I J1 J2 c x.(N(\x.True,x) & J1(\d4.(d1 = d4)) & J2(\d4.$less(d1,d4)) & H(\y.-N(\x.True,y)) & I(E(x,d1),-(d1 = d3),\y.E(y,d2)))
  semantics: \E N d2 d1 d3 H I J1 J2 c x.(N(\x.True,x) & J1(\d4.(d1 = d4)) & J2(\d4.$lesseq(d1,$difference(d4,_d0))) & H(\y.-N(\x.True,y)) & I(E(x,d1),-(d1 = d3),\y.E(y,d2)))
  pos: JJ
  entity: NEG

- category: N[adj=true]|N
  # semantics: \E N d2 d1 d3 H I J1 J2 c x.(N(\x.True,x) & J1(\d4.(d1 = d4)) & J2(\d4.$less(d1,d4)) & H(\y.-N(\x.True,y)) & I(_many(x,d1),-(d1 = d3),\y.E(y,d2)))
  semantics: \E N d2 d1 d3 H I J1 J2 c x.(N(\x.True,x) & J1(\d4.(d1 = d4)) & J2(\d4.$lesseq(d1,$difference(d4,_d0))) & H(\y.-N(\x.True,y)) & I(_many(x,d1),-(d1 = d3),\y.E(y,d2)))
  pos: JJ
  surf: few

- category: N[adj=true]|N
  # semantics: \E N d1 d2 d3 H I J1 J2 c x.(N(\x.True,x) & J1(\d4.$less(d4,d1)) & J2(\d4.$less(d4,d1)) & H(\y.-N(\x.True,y)) & I(E(x,d1),-(d1 = d3),\y.E(y,d2)))
  semantics: \E N d1 d2 d3 H I J1 J2 c x.(N(\x.True,x) & J1(\d4.$less(d4,d1)) & J2(\d4.$lesseq($sum(d4,_d0),d1)) & H(\y.-N(\x.True,y)) & I(E(x,d1),-(d1 = d3),\y.E(y,d2)))
  pos: JJ
  entity: POS

- category: N[adj=true]|N
  # semantics: \E N d2 d1 d3 H I J1 J2 c x.(N(\G.(G = c),x) & J1(\d4.(d1 = d4)) & J2(\d4.$less(d1,d4)) & H(\y.-N(\G.(G = c),y)) & I(E(x,_np(c,d1)),-(d1 = d3),\y.E(y,_np(c,d2))))
  # semantics: \E N d2 d1 d3 H I J1 J2 c x.(N(\G.(G = c),x) & J1(\d4.(d1 = d4)) & J2(\d4.$lesseq(d1,$difference(d4,_d0))) & H(\y.-N(\G.(G = c),y)) & I(E(x,_np(c,d1)),-(d1 = d3),\y.E(y,_np(c,d2))))
  semantics: \E N d2 d1 d3 H I J1 J2 c x.(N(\G.(G = c),x) & J1(\d4.(d1 = d4)) & J2(\d4.$lesseq(d1,$difference(d4,_d0))) & H(\y.-N(\x.True,y)) & I(E(x,_np(c,d1)),-(d1 = d3),\y.E(y,_np(c,d2))))
  pos: JJ
  entity: NEG-INT

- category: N[adj=true]|N
  # semantics: \E N d1 d2 d3 H I J1 J2 c x.(N(\G.(G = c),x) & J1(\d4.$less(d4,d1)) & J2(\d4.$less(d4,d1)) & H(\y.-N(\G.(G = c),y)) & I(E(x,_np(c,d1)),-(d1 = d3),\y.E(y,_np(c,d2))))
  # semantics: \E N d1 d2 d3 H I J1 J2 c x.(N(\G.(G = c),x) & J1(\d4.$less(d4,d1)) & J2(\d4.$lesseq($sum(d4,_d0),d1)) & H(\y.-N(\G.(G = c),y)) & I(E(x,_np(c,d1)),-(d1 = d3),\y.E(y,_np(c,d2))))
  semantics: \E N d1 d2 d3 H I J1 J2 c x.(N(\G.(G = c),x) & J1(\d4.$less(d4,d1)) & J2(\d4.$lesseq($sum(d4,_d0),d1)) & H(\y.-N(\x.True,y)) & I(E(x,_np(c,d1)),-(d1 = d3),\y.E(y,_np(c,d2))))
  pos: JJ
  entity: POS-INT

- category: N[adj=true]|N
  semantics: \E N d2 d1 d3 H I J1 J2 c x.(N(\x.True,x) & J1(\d4.(d1 = d4)) & H(\y.-N(\x.True,y)) & I(E(x,d1),H(\y.E(y,d2)),(d1 = d3)))
  pos: JJR
  entity: NEG

- category: N[adj=true]|N
  semantics: \E N d1 d2 d3 H I J1 J2 c x.(N(\x.True,x) & J1(\d4.$less(d4,d1)) & H(\y.-N(\x.True,y)) & I(E(x,d1),H(\y.E(y,d2)),(d1 = d3)))
  pos: JJR
  entity: POS
  
- category: N[adj=true]|N
  # semantics: \E N d2 d1 d3 H I J1 J2 c x.(N(\G.(G = c),x) & J1(\d4.(d1 = d4)) & H(\y.-N(\G.(G = c),y)) & I(E(x,_np(c,d1)),H(\y.E(y,_np(c,d2))),(d1 = d3)))
  semantics: \E N d2 d1 d3 H I J1 J2 c x.(N(\G.(G = c),x) & J1(\d4.(d1 = d4)) & H(\y.-N(\x.True,y)) & I(E(x,_np(c,d1)),H(\y.E(y,_np(c,d2))),(d1 = d3)))
  pos: JJR
  entity: NEG-INT

- category: N[adj=true]|N
  # semantics: \E N1 d1 d2 d3 H I J1 J2 c x.(N1(\N2.(N2 = c),x) & J1(\d4.$less(d4,d1)) & H(\y.-N1(\N2.(N2 = c),y)) & I(E(x,_np(c,d1)),H(\y.E(y,_np(c,d2))),(d1 = d3)))
  semantics: \E N d1 d2 d3 H I J1 J2 c x.(N(\G.(G = c),x) & J1(\d4.$less(d4,d1)) & H(\y.-N(\x.True,y)) & I(E(x,_np(c,d1)),H(\y.E(y,_np(c,d2))),(d1 = d3)))
  pos: JJR
  entity: POS-INT

- category: N|N
  semantics: \E N F x. N(\G.(E(x) & F(G)),x)
  entity: PRE

# - category: N|N
#   semantics: \E N1 F x. exists y.N1(\N2.(E(y,x) & F(N2)),x)
#   pos: VBN

- category: N|N
  semantics: \E X. X
  surf: other

- category: N|N
  semantics: \E N1 F x. E(N1(F,x))
  entity: N-SUB
  surf: former

- category: N|N
  semantics: \E N F x. N(\G.(E(x) & F(G)),x)
  entity: B-NORP

# ex. John won more orders than Bob.
- category: NP[adj=true]|N
  # semantics: \E N1 V Q d1 d2 I K.V(\F1 F2 y.F2(y),\F1 F2 F3.Q(F1,I(\x z1.(F2(z1,x) & N1(\x.True,x) & _many(x,d1)),\y z2.(F3(z2,y) & N1(\x.True,y) & _many(y,d2)))),\e.True)
  semantics: \E N F1 F2 V Q d1 d2 H I J K.V(\G1 G2 y.G2(y),\G C1 C2.Q(G,I(\x z1.(C1(z1,x) & N(\x.True,x) & _many(x,d1)),\y z2.(C2(z2,y) & N(\x.True,y) & _many(y,d2)))),\e.True)
  surf: more

- category: NP[adj=true]|N
  # semantics: \E N1 V Q d1 d2 I K.V(\F1 F2 y.F2(y),\F1 F2 F3.Q(F1,I(\x z1.(F2(z1,x) & N1(\x.True,x) & _many(x,d1)),\y z2.(F3(z2,y) & N1(\x.True,y) & _many(y,d2)))),\e.True)
  semantics: \E N F1 F2 V Q d1 d2 H I J K.V(\G1 G2 y.G2(y),\G C1 C2.Q(G,I(\x z1.(C1(z1,x) & N(\x.True,x) & _many(x,d1)),\y z2.(C2(z2,y) & N(\x.True,y) & _many(y,d2)))),\e.True)
  surf: as~many

##### Auxiliary expressions #####

- category: (S|NP)|(S[b=true]|NP)
  semantics: \E V Q K. V(Q, K)
  surf: do

- category: (S|NP)|(S[b=true]|NP)
  semantics: \E V Q K. V(Q, K)
  surf: does

- category: (S|NP)|(S[b=true]|NP)
  semantics: \E V Q K. V(Q, K)
  surf: did

- category: (S|NP)|(S[pt=true]|NP)
  semantics: \E V Q K. V(Q, K)
  base: have

- category: (S|NP)|(S[b=true]|NP)
  # semantics: \E V Q K. V(Q, K)
  semantics: \E V Q K. Q(\x.True, \x.V(\F1 F2.(E(x) & F2(x)),K))
  base: will

- category: (S|NP)|(S[to=true]|NP)
  # semantics: \E V Q K. V(Q, K)
  semantics: \E V Q K. Q(\x.True, \x.V(\F1 F2.(E(x) & F2(x)),K))
  base: use
  pos: VBD


##### Connectives #####

- category: conj
  semantics: \E X. X
  surf: "and"

- category: (S|S)|S
  semantics: \E S1 S2 K. (S1(\e.True) -> S2(K))
  surf: if

- category: (S|S)|S
  semantics: \E S1 S2 K. (S1(\e.True) -> S2(K))
  surf: in~case

- category: (S|S)|S
  # semantics: \E S1 S2 K. (S1(\e.True) -> S2(K))
  semantics: \E S1 S2 K. (-S1(\e.True) & S2(\e.True))
  # semantics: \E S1 S2 K. (S2(\e.True) & (S1(\e.True) -> S2(K)))
  surf: before

- category: ((S|NP)|(S|NP))|S
  # semantics: \E S1 V1 Q K. (V1(Q,K) & (S1(\e.True) -> V1(Q,K)))
  semantics: \E S1 V1 Q K. (-S1(\e.True) & V1(Q,K))
  surf: before

- category: ((S|NP)|(S|NP))|S
  semantics: \E S1 V1 Q K. (S1(\e.True) -> V1(Q,K))
  surf: if

- category: (S|S)|S
  semantics: \E S1 S2 K. (-S1(\e.True) -> S2(K))
  surf: unless

- category: ((S|NP)|(S|NP))|S
  semantics: \E S V1 Q K. (-S(\e.True) -> V1(Q,K))
  surf: unless

- category: ((S[adj=true]|NP)|(S[adj=true]|NP))|S
  semantics:  \E S A Q d1 d2 d3 H I J1 J2 K. A(\A1 A2.Q(A1,\x.(A2(x) & S(\e.True))),d1,d2,d3,H,I,J1,J2,K)

- category: (S|S)|S
  semantics: \E S1 S2 K. (S1(\e.True) -> S2(K))
  base: when

- category: (S|NP)|(S|NP)
  semantics: \E V Q K. V(Q,K)
  base: either

- category: N|N
  semantics: \E X.X
  base: either

- category: NP|NP
  semantics: \E X.X
  base: either

- category: N|N
  semantics: \E X.X
  base: both

- category: NP|NP
  semantics: \E X.X
  base: both

- category: N|N
  semantics: \E X.X
  base: several

- category: NP|NP
  semantics: \E X.X
  base: several

- category: NP|NP
  semantics: \E X.X
  base: almost

- category: (S|S)|S
  semantics: \E S1 S2 K. ((S1(\e.True) | -S1(\e.True)) -> S2(K))
  surf: whether~or~not

- category: (S|S)|S
  semantics: \E S1 S2 K. (S2(\e.True) & -S1(\e.True))
  base: nor

### Numeral ###

- category: N/N
  semantics: \E. E
  pos: CD

- category: N|N
  semantics: \E N F x. N(\G.((x = E) & F(G)),x)
  pos: CD
  entity: I-PERCENT

- category: N|N
  semantics: \E N F x. N(\G.((x = E) & F(G)),x)
  pos: CD
  entity: B-PERCENT

- category: N|N
  semantics: \E N F x. N(\G.(E(x) & F(G)),x)
  entity: I-MONEY

- category: N|N
  semantics: \E N F x. N(\G.((x = E) & F(G)),x)
  entity: B-DATE

- category: ((S[adj=true]\NP)/(S[adj=true]\NP))/((S[adj=true]\NP)/(S[adj=true]\NP))
  semantics: \E. E
  pos: CD

- category: (((S\NP)\(S\NP))/((S\NP)\(S\NP)))/(((S\NP)\(S\NP))/((S\NP)\(S\NP)))
  semantics: \E. E
  pos: CD

- category: (N|N)|(N|N)
  semantics: \E. E
  pos: CD

- category: ((N|N)|(N|N))|((N|N)|(N|N))
  semantics: \E. E
  pos: CD

## multicative ##
- category: N|N
  semantics: \E d. $product(d,2)
  surf: twice

- category: (N|N)|(N|N)
  semantics: \E d. $product(d,2)
  surf: twice

- category: (S[adj=true]|NP)|(S[adj=true]|NP)
  semantics: \E A Q d1 d2 d3 H I J1 J2 K.exists d1.A(Q,$product(d1,2),d1,_th(_u),H,\A1 A2 A3 x.(-A2 -> A1(x)),J1,J2,K)
  surf: twice

- category: (N[adj=true]|N)|(N[adj=true]|N)
  semantics: \E A N d1 d2 d3 H I J1 J2 c x.all d1.exists c.A(N,d1,$difference(d1,E),E,\A1 A2 A3.(-A2 -> A1),J1,J2,c,x)
  pos: CD

- category: (NP[adj=true]|N)|(NP[adj=true]|N)
  # semantics: \E A N V Q d1 d2 I K.all d1.A(N,V,Q,$product(d1,2),d1,\A1 A2 z2 z1.(exists y.A2(y,z2) -> exists x.A1(x,z1)),K)
  semantics: \E A N F1 F2 V Q d1 d2 H I J K.all d1.A(N,F1,F2,V,Q,$product(d1,2),d1,H,\A1 A2 z2 z1.(exists y.A2(y,z2) -> exists x.A1(x,z1)),J,K)
  surf: twice

- category: (NP[adj=true]|N)|(NP[adj=true]|N)
  # semantics: \E A N V Q d1 d2 I K.all d1.A(N,V,Q,$sum(d1,E),d1,\A1 A2 z2 z1.(exists y.A2(y,z2) -> exists x.A1(x,z1)),K)
  semantics: \E A N F1 F2 V Q d1 d2 H I J K.all d1.A(N,F1,F2,V,Q,$sum(d1,E),d1,H,\A1 A2 z2 z1.(exists y.A2(y,z2) -> exists x.A1(x,z1)),J,K)
  pos: CD

### Implicature ###

- category: ((NP[adj=true]|N)|(NP[adj=true]|N))|((NP[adj=true]|N)|(NP[adj=true]|N))
  # semantics: \E D A N V Q d1 d2 I K.D((\N V Q d1 d2 I K.A(N,V,Q,d1,d2,\A1 A2 z2 z1.(exists y.A2(y,z2) <-> exists x.A1(x,z1)),K)),N,V,Q,d1,d2,I,K)
  semantics: \E D A N F1 F2 V Q d1 d2 H I J K.D((\N F1 F2 V Q d1 d2 H I J K.A(N,F1,F2,V,Q,d1,d2,H,\A1 A2 z2 z1.(exists y.A2(y,z2) <-> exists x.A1(x,z1)),J,K)),N,F1,F2,V,Q,d1,d2,H,I,J,K)
  surf: dgr
  pos: EMP

###################

##### Possesive particle #####

- category: (NP|N)|NP
  semantics: \E Q N F1 F2. exists x.((Q(\x.True, \y.Rel(x, y)) & N(\x.True,x)) & F1(x) & F2(x))
  surf: "'s"

- category: ((S|NP[expl=true])/S[em=true])/(S[adj=true]\NP)
  semantics: \E A S Q K.Q(\x.True,\x.exists e.(A(\F1 F2.Q(F1,\x.F2(S)),d1,d2,d3,H,I,J1,J2,K) & (Subj(e) = x) & AccI(e,S(\w.True)) & K(e)))
  surf: "_'s"

- category: (NP|N)|NP
  semantics: \E Q N F1 F2. exists x.((Q(\x.True, \y.Rel(x, y)) & N(\x.True,x)) & F1(x) & F2(x))
  surf: "'"

##### Sentence final particle #####

- category: .
  semantics: \S X. X
  surf: "."

- category: =true,
  semantics: \S X. X
  surf: ","

- category: ","
  semantics: \S X. X
  surf: ","

- category: .
  semantics: \S X. X
  surf: "?"

############### Lexical entries for rebanked parsers #################

- category: PP|NP
  semantics: \E Q e. Q(\x.True, \x.((Subj(e) = x)))
  surf: by

- category: PP|NP
  semantics: \E Q e. Q(\x.True, \x.((Dat(e) = x)))
  surf: to

- category: (NP|(N|PP))|NP
  semantics: \E Q M F1 F2. exists x.((Q(\x.True, \y.Rel(x,y)) & M(\w.True,\x.True,x)) & F1(x) & F2(x))
  surf: "'s"

- category: (NP|(N|PP))|NP
  semantics: \E Q M F1 F2. exists x.((Q(\x.True, \y.Rel(x,y)) & M(\w.True,\x.True,x)) & F1(x) & F2(x))
  surf: "'"